var e,r,t,n={335:(e,r,t)=>{t.d(r,{Z:()=>s});var n=t(246),o=t(634),a=t(850),i=t.n(a),l=t(15);const s=(e=>{const r=document.getElementById("root");if(!r)throw new Error("container element could not be found");o.a(r,(0,n.jsx)((()=>{const[e,r]=i().useState("");return(0,n.jsxs)("div",{style:{padding:"1rem",borderRadius:"0.25rem",border:"4px dashed #fc451e"},children:[(0,n.jsx)(l.q,{children:(0,n.jsx)("title",{children:"SSR MF Example"})}),(0,n.jsxs)("div",{style:{padding:"1rem"},children:[(0,n.jsx)("h1",{children:"Module Federation Example: Server Side Rendering"}),(0,n.jsx)("h2",{children:"This is the shell application."}),(0,n.jsx)("p",{children:"You can try to disable JavaScript and reload the page."})]}),(0,n.jsxs)("div",{style:{padding:"1rem"},children:[(0,n.jsx)("h3",{children:"Type something into this input"}),(0,n.jsx)("input",{type:"text",value:e,onChange:e=>r(e.target.value),placeholder:"Luke, I am your father..."})]}),(0,n.jsx)(i().Suspense,{fallback:(0,n.jsx)("h1",{children:"Loading...."}),children:(0,n.jsx)("div",{children:"test"})})]})}),{}))})()}},o={};function a(e){var r=o[e];if(void 0!==r)return r.exports;var t=o[e]={exports:{}};return n[e](t,t.exports,a),t.exports}a.m=n,a.c=o,e=[],a.O=(r,t,n,o)=>{if(!t){var i=1/0;for(d=0;d<e.length;d++){for(var[t,n,o]=e[d],l=!0,s=0;s<t.length;s++)(!1&o||i>=o)&&Object.keys(a.O).every((e=>a.O[e](t[s])))?t.splice(s--,1):(l=!1,o<i&&(i=o));if(l){e.splice(d--,1);var u=n();void 0!==u&&(r=u)}}return r}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[t,n,o]},a.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return a.d(r,{a:r}),r},a.d=(e,r)=>{for(var t in r)a.o(r,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((r,t)=>(a.f[t](e,r),r)),[])),a.u=e=>e+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{a.S={};var e={},r={};a.I=(t,n)=>{n||(n=[]);var o=r[t];if(o||(o=r[t]={}),!(n.indexOf(o)>=0)){if(n.push(o),e[t])return e[t];a.o(a.S,t)||(a.S[t]={});var i=a.S[t],l=(e,r,t,n)=>{var o=i[e]=i[e]||{},a=o[r];(!a||!a.loaded&&(!n!=!a.eager?n:"zoe">a.from))&&(o[r]={get:t,from:"zoe",eager:!!n})},s=[];return"default"===t&&(l("react-dom","18.2.0",(()=>a.e(542).then((()=>()=>a(542))))),l("react","18.2.0",(()=>a.e(378).then((()=>()=>a(378)))))),e[t]=s.length?Promise.all(s).then((()=>e[t]=1)):1}}})(),(()=>{var e=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),n=t[1]?r(t[1]):[];return t[2]&&(n.length++,n.push.apply(n,r(t[2]))),t[3]&&(n.push([]),n.push.apply(n,r(t[3]))),n},r=e=>{var t=e[0],n="";if(1===e.length)return"*";if(t+.5){n+=0==t?">=":-1==t?"<":1==t?"^":2==t?"~":t>0?"=":"!=";for(var o=1,a=1;a<e.length;a++)o--,n+="u"==(typeof(l=e[a]))[0]?"-":(o>0?".":"")+(o=2,l);return n}var i=[];for(a=1;a<e.length;a++){var l=e[a];i.push(0===l?"not("+s()+")":1===l?"("+s()+" || "+s()+")":2===l?i.pop()+" "+i.pop():r(l))}return s();function s(){return i.pop().replace(/^\((.+)\)$/,"$1")}},t=(r,n)=>{if(0 in r){n=e(n);var o=r[0],a=o<0;a&&(o=-o-1);for(var i=0,l=1,s=!0;;l++,i++){var u,d,f=l<r.length?(typeof r[l])[0]:"";if(i>=n.length||"o"==(d=(typeof(u=n[i]))[0]))return!s||("u"==f?l>o&&!a:""==f!=a);if("u"==d){if(!s||"u"!=f)return!1}else if(s)if(f==d)if(l<=o){if(u!=r[l])return!1}else{if(a?u>r[l]:u<r[l])return!1;u!=r[l]&&(s=!1)}else if("s"!=f&&"n"!=f){if(a||l<=o)return!1;s=!1,l--}else{if(l<=o||d<f!=a)return!1;s=!1}else"s"!=f&&"n"!=f&&(s=!1,l--)}}var h=[],c=h.pop.bind(h);for(i=1;i<r.length;i++){var p=r[i];h.push(1==p?c()|c():2==p?c()&c():p?t(p,n):!c())}return!!c()},n=(r,t)=>{var n=r[t];return Object.keys(n).reduce(((r,t)=>!r||!n[r].loaded&&((r,t)=>{r=e(r),t=e(t);for(var n=0;;){if(n>=r.length)return n<t.length&&"u"!=(typeof t[n])[0];var o=r[n],a=(typeof o)[0];if(n>=t.length)return"u"==a;var i=t[n],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&o!=i)return o<i;n++}})(r,t)?t:r),0)},o=(e,o,a,s)=>{var u=n(e,a);return t(s,u)||i(((e,t,n,o)=>"Unsatisfied version "+n+" from "+(n&&e[t][n].from)+" of shared singleton module "+t+" (required "+r(o)+")")(e,a,u,s)),l(e[a][u])},i=e=>{"undefined"!=typeof console&&console.warn&&console.warn(e)},l=e=>(e.loaded=1,e.get()),s=e=>function(r,t,n,o){var i=a.I(r);return i&&i.then?i.then(e.bind(e,r,a.S[r],t,n,o)):e(r,a.S[r],t,n,o)},u=s(((e,r,t,o)=>r&&a.o(r,t)?((e,r,t,o)=>{var a=n(e,t);return l(e[t][a])})(r,0,t):o())),d=s(((e,r,t,n,i)=>r&&a.o(r,t)?o(r,0,t,n):i())),f={},h={647:()=>u("default","react",(()=>a.e(378).then((()=>()=>a(378))))),336:()=>u("default","react-dom",(()=>a.e(542).then((()=>()=>a(542))))),850:()=>d("default","react",[1,18,2,0],(()=>a.e(378).then((()=>()=>a(378))))),145:()=>d("default","react",[,[1,18,0,0],[1,17,0,0],[1,16,3,0],1,1],(()=>a.e(378).then((()=>()=>a(378))))),576:()=>d("default","react",[0,16,3,0],(()=>a.e(378).then((()=>()=>a(378)))))};[647,336,850,145,576].forEach((e=>{a.m[e]=r=>{f[e]=0,delete a.c[e];var t=h[e]();if("function"!=typeof t)throw new Error("Shared module is not available for eager consumption: "+e);r.exports=t()}}));var c={};a.f.consumes=(e,r)=>{a.o(c,e)&&c[e].forEach((e=>{if(a.o(f,e))return r.push(f[e]);var t=r=>{f[e]=0,a.m[e]=t=>{delete a.c[e],t.exports=r()}},n=r=>{delete f[e],a.m[e]=t=>{throw delete a.c[e],r}};try{var o=h[e]();o.then?r.push(f[e]=o.then(t).catch(n)):t(o)}catch(e){n(e)}}))}})(),r={179:0},t=e=>{var t,n,{ids:o,modules:i,runtime:l}=e,s=0;for(t in i)a.o(i,t)&&(a.m[t]=i[t]);for(l&&l(a);s<o.length;s++)n=o[s],a.o(r,n)&&r[n]&&r[n][0](),r[o[s]]=0;a.O()},a.f.j=(e,n)=>{var o=a.o(r,e)?r[e]:void 0;if(0!==o)if(o)n.push(o[1]);else{var i=import("./"+a.u(e)).then(t,(t=>{throw 0!==r[e]&&(r[e]=void 0),t}));i=Promise.race([i,new Promise((t=>o=r[e]=[t]))]),n.push(o[1]=i)}},a.O.j=e=>0===r[e];var i=a.O(void 0,[939],(()=>a(335))),l=(i=a.O(i)).Z;export{l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,