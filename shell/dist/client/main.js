var e,r,t,n={335:(e,r,t)=>{t.d(r,{Z:()=>s});var n=t(246),o=t(634),a=t(104),i=t.n(a),l=t(15);const s=(e=>{const r=document.getElementById("root");if(!r)throw new Error("container element could not be found");o.a(r,(0,n.jsx)((()=>{const[e,r]=i().useState("");return(0,n.jsxs)("div",{style:{padding:"1rem",borderRadius:"0.25rem",border:"4px dashed #fc451e"},children:[(0,n.jsx)(l.q,{children:(0,n.jsx)("title",{children:"SSR MF Example"})}),(0,n.jsxs)("div",{style:{padding:"1rem"},children:[(0,n.jsx)("h1",{children:"Module Federation Example: Server Side Rendering"}),(0,n.jsx)("h2",{children:"This is the shell application."}),(0,n.jsx)("p",{children:"You can try to disable JavaScript and reload the page."})]}),(0,n.jsxs)("div",{style:{padding:"1rem"},children:[(0,n.jsx)("h3",{children:"Type something into this input"}),(0,n.jsx)("input",{type:"text",value:e,onChange:e=>r(e.target.value),placeholder:"Luke, I am your father..."})]}),(0,n.jsx)(i().Suspense,{fallback:(0,n.jsx)("h1",{children:"Loading...."}),children:(0,n.jsx)("div",{children:"test"})})]})}),{}))})()}},o={};function a(e){var r=o[e];if(void 0!==r)return r.exports;var t=o[e]={exports:{}};return n[e](t,t.exports,a),t.exports}a.m=n,a.c=o,e=[],a.O=(r,t,n,o)=>{if(!t){var i=1/0;for(d=0;d<e.length;d++){for(var[t,n,o]=e[d],l=!0,s=0;s<t.length;s++)(!1&o||i>=o)&&Object.keys(a.O).every((e=>a.O[e](t[s])))?t.splice(s--,1):(l=!1,o<i&&(i=o));if(l){e.splice(d--,1);var u=n();void 0!==u&&(r=u)}}return r}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[t,n,o]},a.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return a.d(r,{a:r}),r},a.d=(e,r)=>{for(var t in r)a.o(r,t)&&!a.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((r,t)=>(a.f[t](e,r),r)),[])),a.u=e=>e+".js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{a.S={};var e={},r={};a.I=(t,n)=>{n||(n=[]);var o=r[t];if(o||(o=r[t]={}),!(n.indexOf(o)>=0)){if(n.push(o),e[t])return e[t];a.o(a.S,t)||(a.S[t]={});var i=a.S[t],l=(e,r,t,n)=>{var o=i[e]=i[e]||{},a=o[r];(!a||!a.loaded&&(!n!=!a.eager?n:"zoe">a.from))&&(o[r]={get:t,from:"zoe",eager:!!n})},s=[];return"default"===t&&(l("react-dom","18.2.0",(()=>a.e(542).then((()=>()=>a(542))))),l("react","18.2.0",(()=>a.e(378).then((()=>()=>a(378)))))),e[t]=s.length?Promise.all(s).then((()=>e[t]=1)):1}}})(),(()=>{var e=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),n=t[1]?r(t[1]):[];return t[2]&&(n.length++,n.push.apply(n,r(t[2]))),t[3]&&(n.push([]),n.push.apply(n,r(t[3]))),n},r=(t,n)=>{if(0 in t){n=e(n);var o=t[0],a=o<0;a&&(o=-o-1);for(var i=0,l=1,s=!0;;l++,i++){var u,d,h=l<t.length?(typeof t[l])[0]:"";if(i>=n.length||"o"==(d=(typeof(u=n[i]))[0]))return!s||("u"==h?l>o&&!a:""==h!=a);if("u"==d){if(!s||"u"!=h)return!1}else if(s)if(h==d)if(l<=o){if(u!=t[l])return!1}else{if(a?u>t[l]:u<t[l])return!1;u!=t[l]&&(s=!1)}else if("s"!=h&&"n"!=h){if(a||l<=o)return!1;s=!1,l--}else{if(l<=o||d<h!=a)return!1;s=!1}else"s"!=h&&"n"!=h&&(s=!1,l--)}}var f=[],c=f.pop.bind(f);for(i=1;i<t.length;i++){var p=t[i];f.push(1==p?c()|c():2==p?c()&c():p?r(p,n):!c())}return!!c()},t=(t,n,o)=>{var a=t[n];return(n=Object.keys(a).reduce(((t,n)=>!r(o,n)||t&&!((r,t)=>{r=e(r),t=e(t);for(var n=0;;){if(n>=r.length)return n<t.length&&"u"!=(typeof t[n])[0];var o=r[n],a=(typeof o)[0];if(n>=t.length)return"u"==a;var i=t[n],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&o!=i)return o<i;n++}})(t,n)?t:n),0))&&a[n]},n=(e=>function(r,t,n,o){var i=a.I(r);return i&&i.then?i.then(e.bind(e,r,a.S[r],t,n,o)):e(r,a.S[r],t,n,o)})(((e,r,n,o,i)=>{var l=r&&a.o(r,n)&&t(r,n,o);return l?(e=>(e.loaded=1,e.get()))(l):i()})),o={},i={104:()=>n("default","react",[1,18,2,0],(()=>a.e(378).then((()=>()=>a(378))))),53:()=>n("default","react-dom",[1,18,2,0],(()=>a.e(542).then((()=>()=>a(542)))))};[104,53].forEach((e=>{a.m[e]=r=>{o[e]=0,delete a.c[e];var t=i[e]();if("function"!=typeof t)throw new Error("Shared module is not available for eager consumption: "+e);r.exports=t()}}));var l={};a.f.consumes=(e,r)=>{a.o(l,e)&&l[e].forEach((e=>{if(a.o(o,e))return r.push(o[e]);var t=r=>{o[e]=0,a.m[e]=t=>{delete a.c[e],t.exports=r()}},n=r=>{delete o[e],a.m[e]=t=>{throw delete a.c[e],r}};try{var l=i[e]();l.then?r.push(o[e]=l.then(t).catch(n)):t(l)}catch(e){n(e)}}))}})(),r={179:0},t=e=>{var t,n,{ids:o,modules:i,runtime:l}=e,s=0;for(t in i)a.o(i,t)&&(a.m[t]=i[t]);for(l&&l(a);s<o.length;s++)n=o[s],a.o(r,n)&&r[n]&&r[n][0](),r[o[s]]=0;a.O()},a.f.j=(e,n)=>{var o=a.o(r,e)?r[e]:void 0;if(0!==o)if(o)n.push(o[1]);else{var i=import("./"+a.u(e)).then(t,(t=>{throw 0!==r[e]&&(r[e]=void 0),t}));i=Promise.race([i,new Promise((t=>o=r[e]=[t]))]),n.push(o[1]=i)}},a.O.j=e=>0===r[e];var i=a.O(void 0,[939],(()=>a(335))),l=(i=a.O(i)).Z;export{l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,