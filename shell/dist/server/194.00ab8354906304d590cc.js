/*! For license information please see 194.00ab8354906304d590cc.js.LICENSE.txt */
exports.id=194,exports.ids=[194],exports.modules={2525:e=>{var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,i,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in a=Object(arguments[l]))n.call(a,u)&&(s[u]=a[u]);if(t){i=t(a);for(var c=0;c<i.length;c++)r.call(a,i[c])&&(s[i[c]]=a[i[c]])}}return s}},8772:(e,t,n)=>{var r=n(331);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},3615:(e,t,n)=>{e.exports=n(8772)()},331:e=>{e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},2637:(e,t,n)=>{var r=n(104),o=n(2781),a=Object.prototype.hasOwnProperty,i=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,s={},l={};function u(e){return!!a.call(l,e)||!a.call(s,e)&&(i.test(e)?l[e]=!0:(s[e]=!0,!1))}function c(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var d={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){d[e]=new c(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];d[t]=new c(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){d[e]=new c(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){d[e]=new c(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){d[e]=new c(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){d[e]=new c(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){d[e]=new c(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){d[e]=new c(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){d[e]=new c(e,5,!1,e.toLowerCase(),null,!1,!1)}));var f=/[\-:]([a-z])/g;function p(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(f,p);d[t]=new c(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(f,p);d[t]=new c(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(f,p);d[t]=new c(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){d[e]=new c(e,1,!1,e.toLowerCase(),null,!1,!1)})),d.xlinkHref=new c("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){d[e]=new c(e,1,!1,e.toLowerCase(),null,!0,!0)}));var h={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},g=["Webkit","ms","Moz","O"];Object.keys(h).forEach((function(e){g.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),h[t]=h[e]}))}));var m=/["'&<>]/;function y(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var t=m.exec(e);if(t){var n,r="",o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var b=/([A-Z])/g,v=/^ms-/,S=Array.isArray;function w(e,t){return{insertionMode:e,selectedValue:t}}var x=new Map;function k(e,t,n){if("object"!=typeof n)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");for(var r in t=!0,n)if(a.call(n,r)){var o=n[r];if(null!=o&&"boolean"!=typeof o&&""!==o){if(0===r.indexOf("--")){var i=y(r);o=y((""+o).trim())}else{i=r;var s=x.get(i);void 0!==s||(s=y(i.replace(b,"-$1").toLowerCase().replace(v,"-ms-")),x.set(i,s)),i=s,o="number"==typeof o?0===o||a.call(h,r)?""+o:o+"px":y((""+o).trim())}t?(t=!1,e.push(' style="',i,":",o)):e.push(";",i,":",o)}}t||e.push('"')}function T(e,t,n,r){switch(n){case"style":return void k(e,t,r);case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])if(null!==(t=d.hasOwnProperty(n)?d[n]:null)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=t.attributeName,t.type){case 3:r&&e.push(" ",n,'=""');break;case 4:!0===r?e.push(" ",n,'=""'):!1!==r&&e.push(" ",n,'="',y(r),'"');break;case 5:isNaN(r)||e.push(" ",n,'="',y(r),'"');break;case 6:!isNaN(r)&&1<=r&&e.push(" ",n,'="',y(r),'"');break;default:t.sanitizeURL&&(r=""+r),e.push(" ",n,'="',y(r),'"')}}else if(u(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if("data-"!==(t=n.toLowerCase().slice(0,5))&&"aria-"!==t)return}e.push(" ",n,'="',y(r),'"')}}function C(e,t,n){if(null!=t){if(null!=n)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof t||!("__html"in t))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");null!=(t=t.__html)&&e.push(""+t)}}function E(e,t,n,r){e.push(I(n));var o,i=n=null;for(o in t)if(a.call(t,o)){var s=t[o];if(null!=s)switch(o){case"children":n=s;break;case"dangerouslySetInnerHTML":i=s;break;default:T(e,r,o,s)}}return e.push(">"),C(e,i,n),"string"==typeof n?(e.push(y(n)),null):n}var R=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,F=new Map;function I(e){var t=F.get(e);if(void 0===t){if(!R.test(e))throw Error("Invalid tag: "+e);t="<"+e,F.set(e,t)}return t}function P(e,t,n){if(e.push('\x3c!--$?--\x3e<template id="'),null===n)throw Error("An ID must have been assigned before we can complete the boundary.");return e.push(n),e.push('"></template>')}var _=/[<\u2028\u2029]/g;function O(e){return JSON.stringify(e).replace(_,(function(e){switch(e){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}}))}function A(e,t){return{bootstrapChunks:[],startInlineScript:"<script>",placeholderPrefix:(t=void 0===t?"":t)+"P:",segmentPrefix:t+"S:",boundaryPrefix:t+"B:",idPrefix:t,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1,generateStaticMarkup:e}}function M(e,t,n,r){return n.generateStaticMarkup?(e.push(y(t)),!1):(""===t?e=r:(r&&e.push("\x3c!-- --\x3e"),e.push(y(t)),e=!0),e)}var j=Object.assign,L=Symbol.for("react.element"),D=Symbol.for("react.portal"),B=Symbol.for("react.fragment"),N=Symbol.for("react.strict_mode"),H=Symbol.for("react.profiler"),z=Symbol.for("react.provider"),V=Symbol.for("react.context"),$=Symbol.for("react.forward_ref"),q=Symbol.for("react.suspense"),U=Symbol.for("react.suspense_list"),W=Symbol.for("react.memo"),Y=Symbol.for("react.lazy"),X=Symbol.for("react.scope"),Z=Symbol.for("react.debug_trace_mode"),J=Symbol.for("react.legacy_hidden"),G=Symbol.for("react.default_value"),K=Symbol.iterator;function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case B:return"Fragment";case D:return"Portal";case H:return"Profiler";case N:return"StrictMode";case q:return"Suspense";case U:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case V:return(e.displayName||"Context")+".Consumer";case z:return(e._context.displayName||"Context")+".Provider";case $:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case W:return null!==(t=e.displayName||null)?t:Q(e.type)||"Memo";case Y:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}var ee={};function te(e,t){if(!(e=e.contextTypes))return ee;var n,r={};for(n in e)r[n]=t[n];return r}var ne=null;function re(e,t){if(e!==t){e.context._currentValue2=e.parentValue,e=e.parent;var n=t.parent;if(null===e){if(null!==n)throw Error("The stacks must reach the root at the same time. This is a bug in React.")}else{if(null===n)throw Error("The stacks must reach the root at the same time. This is a bug in React.");re(e,n)}t.context._currentValue2=t.value}}function oe(e){e.context._currentValue2=e.parentValue,null!==(e=e.parent)&&oe(e)}function ae(e){var t=e.parent;null!==t&&ae(t),e.context._currentValue2=e.value}function ie(e,t){if(e.context._currentValue2=e.parentValue,null===(e=e.parent))throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");e.depth===t.depth?re(e,t):ie(e,t)}function se(e,t){var n=t.parent;if(null===n)throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");e.depth===n.depth?re(e,n):se(e,n),t.context._currentValue2=t.value}function le(e){var t=ne;t!==e&&(null===t?ae(e):null===e?oe(t):t.depth===e.depth?re(t,e):t.depth>e.depth?ie(t,e):se(t,e),ne=e)}var ue={isMounted:function(){return!1},enqueueSetState:function(e,t){null!==(e=e._reactInternals).queue&&e.queue.push(t)},enqueueReplaceState:function(e,t){(e=e._reactInternals).replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function ce(e,t,n,r){var o=void 0!==e.state?e.state:null;e.updater=ue,e.props=n,e.state=o;var a={queue:[],replace:!1};e._reactInternals=a;var i=t.contextType;if(e.context="object"==typeof i&&null!==i?i._currentValue2:r,"function"==typeof(i=t.getDerivedStateFromProps)&&(o=null==(i=i(n,o))?o:j({},o,i),e.state=o),"function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate&&("function"==typeof e.UNSAFE_componentWillMount||"function"==typeof e.componentWillMount))if(t=e.state,"function"==typeof e.componentWillMount&&e.componentWillMount(),"function"==typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),t!==e.state&&ue.enqueueReplaceState(e,e.state,null),null!==a.queue&&0<a.queue.length)if(t=a.queue,i=a.replace,a.queue=null,a.replace=!1,i&&1===t.length)e.state=t[0];else{for(a=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var s=t[i];null!=(s="function"==typeof s?s.call(e,a,n,r):s)&&(o?(o=!1,a=j({},a,s)):j(a,s))}e.state=a}else a.queue=null}var de={id:1,overflow:""};function fe(e,t,n){var r=e.id;e=e.overflow;var o=32-pe(r)-1;r&=~(1<<o),n+=1;var a=32-pe(t)+o;if(30<a){var i=o-o%5;return a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,{id:1<<32-pe(t)+o|n<<o|r,overflow:a+e}}return{id:1<<a|n<<o|r,overflow:e}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(he(e)/ge|0)|0},he=Math.log,ge=Math.LN2,me="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ye=null,be=null,ve=null,Se=null,we=!1,xe=!1,ke=0,Te=null,Ce=0;function Ee(){if(null===ye)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");return ye}function Re(){if(0<Ce)throw Error("Rendered more hooks than during the previous render");return{memoizedState:null,queue:null,next:null}}function Fe(){return null===Se?null===ve?(we=!1,ve=Se=Re()):(we=!0,Se=ve):null===Se.next?(we=!1,Se=Se.next=Re()):(we=!0,Se=Se.next),Se}function Ie(){be=ye=null,xe=!1,ve=null,Ce=0,Se=Te=null}function Pe(e,t){return"function"==typeof t?t(e):t}function _e(e,t,n){if(ye=Ee(),Se=Fe(),we){var r=Se.queue;if(t=r.dispatch,null!==Te&&void 0!==(n=Te.get(r))){Te.delete(r),r=Se.memoizedState;do{r=e(r,n.action),n=n.next}while(null!==n);return Se.memoizedState=r,[r,t]}return[Se.memoizedState,t]}return e=e===Pe?"function"==typeof t?t():t:void 0!==n?n(t):t,Se.memoizedState=e,e=(e=Se.queue={last:null,dispatch:null}).dispatch=Ae.bind(null,ye,e),[Se.memoizedState,e]}function Oe(e,t){if(ye=Ee(),t=void 0===t?null:t,null!==(Se=Fe())){var n=Se.memoizedState;if(null!==n&&null!==t){var r=n[1];e:if(null===r)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!me(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),Se.memoizedState=[e,t],e}function Ae(e,t,n){if(25<=Ce)throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");if(e===ye)if(xe=!0,e={action:n,next:null},null===Te&&(Te=new Map),void 0===(n=Te.get(t)))Te.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}}function Me(){throw Error("startTransition cannot be called during server rendering.")}function je(){}var Le={readContext:function(e){return e._currentValue2},useContext:function(e){return Ee(),e._currentValue2},useMemo:Oe,useReducer:_e,useRef:function(e){ye=Ee();var t=(Se=Fe()).memoizedState;return null===t?(e={current:e},Se.memoizedState=e):t},useState:function(e){return _e(Pe,e)},useInsertionEffect:je,useLayoutEffect:function(){},useCallback:function(e,t){return Oe((function(){return e}),t)},useImperativeHandle:je,useEffect:je,useDebugValue:je,useDeferredValue:function(e){return Ee(),e},useTransition:function(){return Ee(),[!1,Me]},useId:function(){var e=be.treeContext,t=e.overflow;e=((e=e.id)&~(1<<32-pe(e)-1)).toString(32)+t;var n=De;if(null===n)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");return t=ke++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Ee(),t(e._source)},useSyncExternalStore:function(e,t,n){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");return n()}},De=null,Be=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function Ne(e){return console.error(e),null}function He(){}function ze(e,t,n,r,o,a,i,s,l){var u=[],c=new Set;return(n=$e(t={destination:null,responseState:t,progressiveChunkSize:void 0===r?12800:r,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:u,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:void 0===o?Ne:o,onAllReady:void 0===a?He:a,onShellReady:void 0===i?He:i,onShellError:void 0===s?He:s,onFatalError:void 0===l?He:l},0,null,n,!1,!1)).parentFlushed=!0,e=Ve(t,e,null,n,c,ee,null,de),u.push(e),t}function Ve(e,t,n,r,o,a,i,s){e.allPendingTasks++,null===n?e.pendingRootTasks++:n.pendingTasks++;var l={node:t,ping:function(){var t=e.pingedTasks;t.push(l),1===t.length&&rt(e)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:a,context:i,treeContext:s};return o.add(l),l}function $e(e,t,n,r,o,a){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:a}}function qe(e,t){if(null!=(e=e.onError(t))&&"string"!=typeof e)throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function Ue(e,t){var n=e.onShellError;n(t),(n=e.onFatalError)(t),null!==e.destination?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function We(e,t,n,r,o){for(ye={},be=t,ke=0,e=n(r,o);xe;)xe=!1,ke=0,Ce+=1,Se=null,e=n(r,o);return Ie(),e}function Ye(e,t,n,r){var o=n.render(),a=r.childContextTypes;if(null!=a){var i=t.legacyContext;if("function"!=typeof n.getChildContext)r=i;else{for(var s in n=n.getChildContext())if(!(s in a))throw Error((Q(r)||"Unknown")+'.getChildContext(): key "'+s+'" is not defined in childContextTypes.');r=j({},i,n)}t.legacyContext=r,Je(e,t,o),t.legacyContext=i}else Je(e,t,o)}function Xe(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function Ze(e,t,n,o,i){if("function"==typeof n)if(n.prototype&&n.prototype.isReactComponent){i=te(n,t.legacyContext);var s=n.contextType;ce(s=new n(o,"object"==typeof s&&null!==s?s._currentValue2:i),n,o,i),Ye(e,t,s,n)}else{i=We(e,t,n,o,s=te(n,t.legacyContext));var l=0!==ke;if("object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof)ce(i,n,o,s),Ye(e,t,i,n);else if(l){o=t.treeContext,t.treeContext=fe(o,1,0);try{Je(e,t,i)}finally{t.treeContext=o}}else Je(e,t,i)}else{if("string"!=typeof n){switch(n){case J:case Z:case N:case H:case B:case U:return void Je(e,t,o.children);case X:throw Error("ReactDOMServer does not yet support scope components.");case q:e:{n=t.blockedBoundary,i=t.blockedSegment,s=o.fallback,o=o.children;var c={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:l=new Set,errorDigest:null},d=$e(0,i.chunks.length,c,i.formatContext,!1,!1);i.children.push(d),i.lastPushedText=!1;var f=$e(0,0,null,i.formatContext,!1,!1);f.parentFlushed=!0,t.blockedBoundary=c,t.blockedSegment=f;try{if(Ke(e,t,o),e.responseState.generateStaticMarkup||f.lastPushedText&&f.textEmbedded&&f.chunks.push("\x3c!-- --\x3e"),f.status=1,tt(c,f),0===c.pendingTasks)break e}catch(t){f.status=4,c.forceClientRender=!0,c.errorDigest=qe(e,t)}finally{t.blockedBoundary=n,t.blockedSegment=i}t=Ve(e,s,n,d,l,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if("object"==typeof n&&null!==n)switch(n.$$typeof){case $:if(o=We(e,t,n.render,o,i),0!==ke){n=t.treeContext,t.treeContext=fe(n,1,0);try{Je(e,t,o)}finally{t.treeContext=n}}else Je(e,t,o);return;case W:return void Ze(e,t,n=n.type,o=Xe(n,o),i);case z:if(i=o.children,n=n._context,o=o.value,s=n._currentValue2,n._currentValue2=o,ne=o={parent:l=ne,depth:null===l?0:l.depth+1,context:n,parentValue:s,value:o},t.context=o,Je(e,t,i),null===(e=ne))throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");return o=e.parentValue,e.context._currentValue2=o===G?e.context._defaultValue:o,e=ne=e.parent,void(t.context=e);case V:return void Je(e,t,o=(o=o.children)(n._currentValue2));case Y:return void Ze(e,t,n=(i=n._init)(n._payload),o=Xe(n,o),void 0)}throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==n?n:typeof n)+".")}switch(s=function(e,t,n,o,i){switch(t){case"select":e.push(I("select"));var s=null,l=null;for(p in n)if(a.call(n,p)){var c=n[p];if(null!=c)switch(p){case"children":s=c;break;case"dangerouslySetInnerHTML":l=c;break;case"defaultValue":case"value":break;default:T(e,o,p,c)}}return e.push(">"),C(e,l,s),s;case"option":l=i.selectedValue,e.push(I("option"));var d=c=null,f=null,p=null;for(s in n)if(a.call(n,s)){var h=n[s];if(null!=h)switch(s){case"children":c=h;break;case"selected":f=h;break;case"dangerouslySetInnerHTML":p=h;break;case"value":d=h;default:T(e,o,s,h)}}if(null!=l)if(n=null!==d?""+d:function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(c),S(l)){for(o=0;o<l.length;o++)if(""+l[o]===n){e.push(' selected=""');break}}else""+l===n&&e.push(' selected=""');else f&&e.push(' selected=""');return e.push(">"),C(e,p,c),c;case"textarea":for(c in e.push(I("textarea")),p=l=s=null,n)if(a.call(n,c)&&null!=(d=n[c]))switch(c){case"children":p=d;break;case"value":s=d;break;case"defaultValue":l=d;break;case"dangerouslySetInnerHTML":throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");default:T(e,o,c,d)}if(null===s&&null!==l&&(s=l),e.push(">"),null!=p){if(null!=s)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(S(p)&&1<p.length)throw Error("<textarea> can only have at most one child.");s=""+p}return"string"==typeof s&&"\n"===s[0]&&e.push("\n"),null!==s&&e.push(y(""+s)),null;case"input":for(l in e.push(I("input")),d=p=c=s=null,n)if(a.call(n,l)&&null!=(f=n[l]))switch(l){case"children":case"dangerouslySetInnerHTML":throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");case"defaultChecked":d=f;break;case"defaultValue":c=f;break;case"checked":p=f;break;case"value":s=f;break;default:T(e,o,l,f)}return null!==p?T(e,o,"checked",p):null!==d&&T(e,o,"checked",d),null!==s?T(e,o,"value",s):null!==c&&T(e,o,"value",c),e.push("/>"),null;case"menuitem":for(var g in e.push(I("menuitem")),n)if(a.call(n,g)&&null!=(s=n[g]))switch(g){case"children":case"dangerouslySetInnerHTML":throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");default:T(e,o,g,s)}return e.push(">"),null;case"title":for(h in e.push(I("title")),s=null,n)if(a.call(n,h)&&null!=(l=n[h]))switch(h){case"children":s=l;break;case"dangerouslySetInnerHTML":throw Error("`dangerouslySetInnerHTML` does not make sense on <title>.");default:T(e,o,h,l)}return e.push(">"),s;case"listing":case"pre":for(d in e.push(I(t)),l=s=null,n)if(a.call(n,d)&&null!=(c=n[d]))switch(d){case"children":s=c;break;case"dangerouslySetInnerHTML":l=c;break;default:T(e,o,d,c)}if(e.push(">"),null!=l){if(null!=s)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof l||!("__html"in l))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");null!=(n=l.__html)&&("string"==typeof n&&0<n.length&&"\n"===n[0]?e.push("\n",n):e.push(""+n))}return"string"==typeof s&&"\n"===s[0]&&e.push("\n"),s;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":for(var m in e.push(I(t)),n)if(a.call(n,m)&&null!=(s=n[m]))switch(m){case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:T(e,o,m,s)}return e.push("/>"),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return E(e,n,t,o);case"html":return 0===i.insertionMode&&e.push("<!DOCTYPE html>"),E(e,n,t,o);default:if(-1===t.indexOf("-")&&"string"!=typeof n.is)return E(e,n,t,o);for(f in e.push(I(t)),l=s=null,n)if(a.call(n,f)&&null!=(c=n[f]))switch(f){case"children":s=c;break;case"dangerouslySetInnerHTML":l=c;break;case"style":k(e,o,c);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:u(f)&&"function"!=typeof c&&"symbol"!=typeof c&&e.push(" ",f,'="',y(c),'"')}return e.push(">"),C(e,l,s),s}}((i=t.blockedSegment).chunks,n,o,e.responseState,i.formatContext),i.lastPushedText=!1,l=i.formatContext,i.formatContext=function(e,t,n){switch(t){case"select":return w(1,null!=n.value?n.value:n.defaultValue);case"svg":return w(2,null);case"math":return w(3,null);case"foreignObject":return w(1,null);case"table":return w(4,null);case"thead":case"tbody":case"tfoot":return w(5,null);case"colgroup":return w(7,null);case"tr":return w(6,null)}return 4<=e.insertionMode||0===e.insertionMode?w(1,null):e}(l,n,o),Ke(e,t,s),i.formatContext=l,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:i.chunks.push("</",n,">")}i.lastPushedText=!1}}function Je(e,t,n){if(t.node=n,"object"==typeof n&&null!==n){switch(n.$$typeof){case L:return void Ze(e,t,n.type,n.props,n.ref);case D:throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");case Y:var r=n._init;return void Je(e,t,n=r(n._payload))}if(S(n))return void Ge(e,t,n);if((r=null===n||"object"!=typeof n?null:"function"==typeof(r=K&&n[K]||n["@@iterator"])?r:null)&&(r=r.call(n))){if(!(n=r.next()).done){var o=[];do{o.push(n.value),n=r.next()}while(!n.done);Ge(e,t,o)}return}throw e=Object.prototype.toString.call(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.")}"string"==typeof n?(r=t.blockedSegment).lastPushedText=M(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText):"number"==typeof n&&((r=t.blockedSegment).lastPushedText=M(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function Ge(e,t,n){for(var r=n.length,o=0;o<r;o++){var a=t.treeContext;t.treeContext=fe(a,r,o);try{Ke(e,t,n[o])}finally{t.treeContext=a}}}function Ke(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,a=t.context;try{return Je(e,t,n)}catch(l){if(Ie(),"object"!=typeof l||null===l||"function"!=typeof l.then)throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,le(a),l;n=l;var i=t.blockedSegment,s=$e(0,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(s),i.lastPushedText=!1,e=Ve(e,t.node,t.blockedBoundary,s,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,le(a)}}function Qe(e){var t=e.blockedBoundary;(e=e.blockedSegment).status=3,nt(this,t,e)}function et(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,null===r?(t.allPendingTasks--,2!==t.status&&(t.status=2,null!==t.destination&&t.destination.push(null))):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,r.errorDigest=t.onError(void 0===n?Error("The render was aborted by the server without a reason."):n),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach((function(e){return et(e,t,n)})),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,0===t.allPendingTasks&&(e=t.onAllReady)())}function tt(e,t){if(0===t.chunks.length&&1===t.children.length&&null===t.children[0].boundary){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,1===n.status&&tt(e,n)}else e.completedSegments.push(t)}function nt(e,t,n){if(null===t){if(n.parentFlushed){if(null!==e.completedRootSegment)throw Error("There can only be one root segment. This is a bug in React.");e.completedRootSegment=n}e.pendingRootTasks--,0===e.pendingRootTasks&&(e.onShellError=He,(t=e.onShellReady)())}else t.pendingTasks--,t.forceClientRender||(0===t.pendingTasks?(n.parentFlushed&&1===n.status&&tt(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Qe,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&1===n.status&&(tt(t,n),1===t.completedSegments.length&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,0===e.allPendingTasks&&(e=e.onAllReady)()}function rt(e){if(2!==e.status){var t=ne,n=Be.current;Be.current=Le;var r=De;De=e.responseState;try{var o,a=e.pingedTasks;for(o=0;o<a.length;o++){var i=a[o],s=e,l=i.blockedSegment;if(0===l.status){le(i.context);try{Je(s,i,i.node),s.responseState.generateStaticMarkup||l.lastPushedText&&l.textEmbedded&&l.chunks.push("\x3c!-- --\x3e"),i.abortSet.delete(i),l.status=1,nt(s,i.blockedBoundary,l)}catch(e){if(Ie(),"object"==typeof e&&null!==e&&"function"==typeof e.then){var u=i.ping;e.then(u,u)}else{i.abortSet.delete(i),l.status=4;var c=i.blockedBoundary,d=e,f=qe(s,d);null===c?Ue(s,d):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=f,c.parentFlushed&&s.clientRenderedBoundaries.push(c))),s.allPendingTasks--,0===s.allPendingTasks&&(0,s.onAllReady)()}}}}a.splice(0,o),null!==e.destination&&ut(e,e.destination)}catch(t){qe(e,t),Ue(e,t)}finally{De=r,Be.current=n,n===Le&&le(t)}}}function ot(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,t.push('<template id="'),t.push(e.placeholderPrefix),e=r.toString(16),t.push(e),t.push('"></template>');case 1:n.status=2;var o=!0;r=n.chunks;var a=0;n=n.children;for(var i=0;i<n.length;i++){for(o=n[i];a<o.index;a++)t.push(r[a]);o=at(e,t,o)}for(;a<r.length-1;a++)t.push(r[a]);return a<r.length&&(o=t.push(r[a])),o;default:throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.")}}function at(e,t,n){var r=n.boundary;if(null===r)return ot(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)return e.responseState.generateStaticMarkup||(r=r.errorDigest,t.push("\x3c!--$!--\x3e"),t.push("<template"),r&&(t.push(' data-dgst="'),r=y(r),t.push(r),t.push('"')),t.push("></template>")),ot(e,t,n),!!e.responseState.generateStaticMarkup||t.push("\x3c!--/$--\x3e");if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var o=e.responseState,a=o.nextSuspenseID++;return o=o.boundaryPrefix+a.toString(16),r=r.id=o,P(t,e.responseState,r),ot(e,t,n),t.push("\x3c!--/$--\x3e")}if(r.byteSize>e.progressiveChunkSize)return r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),P(t,e.responseState,r.id),ot(e,t,n),t.push("\x3c!--/$--\x3e");if(e.responseState.generateStaticMarkup||t.push("\x3c!--$--\x3e"),1!==(n=r.completedSegments).length)throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");return at(e,t,n[0]),!!e.responseState.generateStaticMarkup||t.push("\x3c!--/$--\x3e")}function it(e,t,n){return function(e,t,n,r){switch(n.insertionMode){case 0:case 1:return e.push('<div hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 2:return e.push('<svg aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 3:return e.push('<math aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 4:return e.push('<table hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 5:return e.push('<table hidden><tbody id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 6:return e.push('<table hidden><tr id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 7:return e.push('<table hidden><colgroup id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');default:throw Error("Unknown insertion mode. This is a bug in React.")}}(t,e.responseState,n.formatContext,n.id),at(e,t,n),function(e,t){switch(t.insertionMode){case 0:case 1:return e.push("</div>");case 2:return e.push("</svg>");case 3:return e.push("</math>");case 4:return e.push("</table>");case 5:return e.push("</tbody></table>");case 6:return e.push("</tr></table>");case 7:return e.push("</colgroup></table>");default:throw Error("Unknown insertion mode. This is a bug in React.")}}(t,n.formatContext)}function st(e,t,n){for(var r=n.completedSegments,o=0;o<r.length;o++)lt(e,t,n,r[o]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,t.push(e.startInlineScript),e.sentCompleteBoundaryFunction?t.push('$RC("'):(e.sentCompleteBoundaryFunction=!0,t.push('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("')),null===r)throw Error("An ID must have been assigned before we can complete the boundary.");return n=n.toString(16),t.push(r),t.push('","'),t.push(e.segmentPrefix),t.push(n),t.push('")<\/script>')}function lt(e,t,n,r){if(2===r.status)return!0;var o=r.id;if(-1===o){if(-1===(r.id=n.rootSegmentID))throw Error("A root segment ID must have been assigned by now. This is a bug in React.");return it(e,t,r)}return it(e,t,r),e=e.responseState,t.push(e.startInlineScript),e.sentCompleteSegmentFunction?t.push('$RS("'):(e.sentCompleteSegmentFunction=!0,t.push('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("')),t.push(e.segmentPrefix),o=o.toString(16),t.push(o),t.push('","'),t.push(e.placeholderPrefix),t.push(o),t.push('")<\/script>')}function ut(e,t){try{var n=e.completedRootSegment;if(null!==n&&0===e.pendingRootTasks){at(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)t.push(r[n]);n<r.length&&t.push(r[n])}var o,a=e.clientRenderedBoundaries;for(o=0;o<a.length;o++){var i=a[o];r=t;var s=e.responseState,l=i.id,u=i.errorDigest,c=i.errorMessage,d=i.errorComponentStack;if(r.push(s.startInlineScript),s.sentClientRenderFunction?r.push('$RX("'):(s.sentClientRenderFunction=!0,r.push('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("')),null===l)throw Error("An ID must have been assigned before we can complete the boundary.");if(r.push(l),r.push('"'),u||c||d){r.push(",");var f=O(u||"");r.push(f)}if(c||d){r.push(",");var p=O(c||"");r.push(p)}if(d){r.push(",");var h=O(d);r.push(h)}if(!r.push(")<\/script>"))return e.destination=null,o++,void a.splice(0,o)}a.splice(0,o);var g=e.completedBoundaries;for(o=0;o<g.length;o++)if(!st(e,t,g[o]))return e.destination=null,o++,void g.splice(0,o);g.splice(0,o);var m=e.partialBoundaries;for(o=0;o<m.length;o++){var y=m[o];e:{a=e,i=t;var b=y.completedSegments;for(s=0;s<b.length;s++)if(!lt(a,i,y,b[s])){s++,b.splice(0,s);var v=!1;break e}b.splice(0,s),v=!0}if(!v)return e.destination=null,o++,void m.splice(0,o)}m.splice(0,o);var S=e.completedBoundaries;for(o=0;o<S.length;o++)if(!st(e,t,S[o]))return e.destination=null,o++,void S.splice(0,o);S.splice(0,o)}finally{0===e.allPendingTasks&&0===e.pingedTasks.length&&0===e.clientRenderedBoundaries.length&&0===e.completedBoundaries.length&&t.push(null)}}function ct(e,t){if(1===e.status)e.status=2,t.destroy(e.fatalError);else if(2!==e.status&&null===e.destination){e.destination=t;try{ut(e,t)}catch(t){qe(e,t),Ue(e,t)}}}function dt(e,t){try{var n=e.abortableTasks;n.forEach((function(n){return et(n,e,t)})),n.clear(),null!==e.destination&&ut(e,e.destination)}catch(t){qe(e,t),Ue(e,t)}}function ft(){}function pt(e,t,n,r){var o=!1,a=null,i="",s=!1;if(rt(e=ze(e,A(n,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,ft,void 0,(function(){s=!0}),void 0,void 0)),dt(e,r),ct(e,{push:function(e){return null!==e&&(i+=e),!0},destroy:function(e){o=!0,a=e}}),o)throw a;if(!s)throw Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");return i}var ht=function(e){function t(){var t=e.call(this,{})||this;return t.request=null,t.startedFlowing=!1,t}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n._destroy=function(e,t){dt(this.request),t(e)},n._read=function(){this.startedFlowing&&ct(this.request,this)},t}(o.Readable);function gt(){}function mt(e,t){var n=new ht,r=ze(e,A(!1,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,gt,(function(){n.startedFlowing=!0,ct(r,n)}),void 0,void 0);return n.request=r,rt(r),n}t.renderToNodeStream=function(e,t){return mt(e,t)},t.renderToStaticMarkup=function(e,t){return pt(e,t,!0,'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server')},t.renderToStaticNodeStream=function(e,t){return mt(e,t)},t.renderToString=function(e,t){return pt(e,t,!1,'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server')},t.version="18.2.0"},390:(e,t,n)=>{var r=n(3837),o=n(104),a=null,i=0,s=!0;function l(e,t){if("string"==typeof t){if(0!==t.length)if(2048<3*t.length)0<i&&(u(e,a.subarray(0,i)),a=new Uint8Array(2048),i=0),u(e,f.encode(t));else{var n=a;0<i&&(n=a.subarray(i));var r=(n=f.encodeInto(t,n)).read;i+=n.written,r<t.length&&(u(e,a),a=new Uint8Array(2048),i=f.encodeInto(t.slice(r),a).written),2048===i&&(u(e,a),a=new Uint8Array(2048),i=0)}}else 0!==t.byteLength&&(2048<t.byteLength?(0<i&&(u(e,a.subarray(0,i)),a=new Uint8Array(2048),i=0),u(e,t)):((n=a.length-i)<t.byteLength&&(0===n?u(e,a):(a.set(t.subarray(0,n),i),i+=n,u(e,a),t=t.subarray(n)),a=new Uint8Array(2048),i=0),a.set(t,i),2048===(i+=t.byteLength)&&(u(e,a),a=new Uint8Array(2048),i=0)))}function u(e,t){e=e.write(t),s=s&&e}function c(e,t){return l(e,t),s}function d(e){a&&0<i&&e.write(a.subarray(0,i)),a=null,i=0,s=!0}var f=new r.TextEncoder;function p(e){return f.encode(e)}var h=Object.prototype.hasOwnProperty,g=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},y={};function b(e){return!!h.call(y,e)||!h.call(m,e)&&(g.test(e)?y[e]=!0:(m[e]=!0,!1))}function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var S={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){S[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];S[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){S[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){S[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){S[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){S[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){S[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){S[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){S[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var w=/[\-:]([a-z])/g;function x(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(w,x);S[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(w,x);S[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(w,x);S[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){S[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),S.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){S[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},T=["Webkit","ms","Moz","O"];Object.keys(k).forEach((function(e){T.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),k[t]=k[e]}))}));var C=/["'&<>]/;function E(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var t=C.exec(e);if(t){var n,r="",o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var R=/([A-Z])/g,F=/^ms-/,I=Array.isArray,P=p("<script>"),_=p("<\/script>"),O=p('<script src="'),A=p('<script type="module" src="'),M=p('" async=""><\/script>'),j=/(<\/|<)(s)(cript)/gi;function L(e,t,n,r){return t+("s"===n?"\\u0073":"\\u0053")+r}function D(e,t){return{insertionMode:e,selectedValue:t}}var B=p("\x3c!-- --\x3e");function N(e,t,n,r){return""===t?r:(r&&e.push(B),e.push(E(t)),!0)}var H=new Map,z=p(' style="'),V=p(":"),$=p(";");function q(e,t,n){if("object"!=typeof n)throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");for(var r in t=!0,n)if(h.call(n,r)){var o=n[r];if(null!=o&&"boolean"!=typeof o&&""!==o){if(0===r.indexOf("--")){var a=E(r);o=E((""+o).trim())}else{a=r;var i=H.get(a);void 0!==i||(i=p(E(a.replace(R,"-$1").toLowerCase().replace(F,"-ms-"))),H.set(a,i)),a=i,o="number"==typeof o?0===o||h.call(k,r)?""+o:o+"px":E((""+o).trim())}t?(t=!1,e.push(z,a,V,o)):e.push($,a,V,o)}}t||e.push(Y)}var U=p(" "),W=p('="'),Y=p('"'),X=p('=""');function Z(e,t,n,r){switch(n){case"style":return void q(e,t,r);case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])if(null!==(t=S.hasOwnProperty(n)?S[n]:null)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=t.attributeName,t.type){case 3:r&&e.push(U,n,X);break;case 4:!0===r?e.push(U,n,X):!1!==r&&e.push(U,n,W,E(r),Y);break;case 5:isNaN(r)||e.push(U,n,W,E(r),Y);break;case 6:!isNaN(r)&&1<=r&&e.push(U,n,W,E(r),Y);break;default:t.sanitizeURL&&(r=""+r),e.push(U,n,W,E(r),Y)}}else if(b(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if("data-"!==(t=n.toLowerCase().slice(0,5))&&"aria-"!==t)return}e.push(U,n,W,E(r),Y)}}var J=p(">"),G=p("/>");function K(e,t,n){if(null!=t){if(null!=n)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof t||!("__html"in t))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");null!=(t=t.__html)&&e.push(""+t)}}var Q=p(' selected=""');function ee(e,t,n,r){e.push(oe(n));var o,a=n=null;for(o in t)if(h.call(t,o)){var i=t[o];if(null!=i)switch(o){case"children":n=i;break;case"dangerouslySetInnerHTML":a=i;break;default:Z(e,r,o,i)}}return e.push(J),K(e,a,n),"string"==typeof n?(e.push(E(n)),null):n}var te=p("\n"),ne=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,re=new Map;function oe(e){var t=re.get(e);if(void 0===t){if(!ne.test(e))throw Error("Invalid tag: "+e);t=p("<"+e),re.set(e,t)}return t}var ae=p("<!DOCTYPE html>");var ie=p("</"),se=p(">"),le=p('<template id="'),ue=p('"></template>'),ce=p("\x3c!--$--\x3e"),de=p('\x3c!--$?--\x3e<template id="'),fe=p('"></template>'),pe=p("\x3c!--$!--\x3e"),he=p("\x3c!--/$--\x3e"),ge=p("<template"),me=p('"'),ye=p(' data-dgst="');p(' data-msg="'),p(' data-stck="');var be=p("></template>");function ve(e,t,n){if(l(e,de),null===n)throw Error("An ID must have been assigned before we can complete the boundary.");return l(e,n),c(e,fe)}var Se=p('<div hidden id="'),we=p('">'),xe=p("</div>"),ke=p('<svg aria-hidden="true" style="display:none" id="'),Te=p('">'),Ce=p("</svg>"),Ee=p('<math aria-hidden="true" style="display:none" id="'),Re=p('">'),Fe=p("</math>"),Ie=p('<table hidden id="'),Pe=p('">'),_e=p("</table>"),Oe=p('<table hidden><tbody id="'),Ae=p('">'),Me=p("</tbody></table>"),je=p('<table hidden><tr id="'),Le=p('">'),De=p("</tr></table>"),Be=p('<table hidden><colgroup id="'),Ne=p('">'),He=p("</colgroup></table>"),ze=p('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'),Ve=p('$RS("'),$e=p('","'),qe=p('")<\/script>'),Ue=p('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'),We=p('$RC("'),Ye=p('","'),Xe=p('")<\/script>'),Ze=p('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'),Je=p('$RX("'),Ge=p('"'),Ke=p(")<\/script>"),Qe=p(","),et=/[<\u2028\u2029]/g;function tt(e){return JSON.stringify(e).replace(et,(function(e){switch(e){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}}))}var nt=Object.assign,rt=Symbol.for("react.element"),ot=Symbol.for("react.portal"),at=Symbol.for("react.fragment"),it=Symbol.for("react.strict_mode"),st=Symbol.for("react.profiler"),lt=Symbol.for("react.provider"),ut=Symbol.for("react.context"),ct=Symbol.for("react.forward_ref"),dt=Symbol.for("react.suspense"),ft=Symbol.for("react.suspense_list"),pt=Symbol.for("react.memo"),ht=Symbol.for("react.lazy"),gt=Symbol.for("react.scope"),mt=Symbol.for("react.debug_trace_mode"),yt=Symbol.for("react.legacy_hidden"),bt=Symbol.for("react.default_value"),vt=Symbol.iterator;function St(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case at:return"Fragment";case ot:return"Portal";case st:return"Profiler";case it:return"StrictMode";case dt:return"Suspense";case ft:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ut:return(e.displayName||"Context")+".Consumer";case lt:return(e._context.displayName||"Context")+".Provider";case ct:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case pt:return null!==(t=e.displayName||null)?t:St(e.type)||"Memo";case ht:t=e._payload,e=e._init;try{return St(e(t))}catch(e){}}return null}var wt={};function xt(e,t){if(!(e=e.contextTypes))return wt;var n,r={};for(n in e)r[n]=t[n];return r}var kt=null;function Tt(e,t){if(e!==t){e.context._currentValue=e.parentValue,e=e.parent;var n=t.parent;if(null===e){if(null!==n)throw Error("The stacks must reach the root at the same time. This is a bug in React.")}else{if(null===n)throw Error("The stacks must reach the root at the same time. This is a bug in React.");Tt(e,n)}t.context._currentValue=t.value}}function Ct(e){e.context._currentValue=e.parentValue,null!==(e=e.parent)&&Ct(e)}function Et(e){var t=e.parent;null!==t&&Et(t),e.context._currentValue=e.value}function Rt(e,t){if(e.context._currentValue=e.parentValue,null===(e=e.parent))throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");e.depth===t.depth?Tt(e,t):Rt(e,t)}function Ft(e,t){var n=t.parent;if(null===n)throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");e.depth===n.depth?Tt(e,n):Ft(e,n),t.context._currentValue=t.value}function It(e){var t=kt;t!==e&&(null===t?Et(e):null===e?Ct(t):t.depth===e.depth?Tt(t,e):t.depth>e.depth?Rt(t,e):Ft(t,e),kt=e)}var Pt={isMounted:function(){return!1},enqueueSetState:function(e,t){null!==(e=e._reactInternals).queue&&e.queue.push(t)},enqueueReplaceState:function(e,t){(e=e._reactInternals).replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function _t(e,t,n,r){var o=void 0!==e.state?e.state:null;e.updater=Pt,e.props=n,e.state=o;var a={queue:[],replace:!1};e._reactInternals=a;var i=t.contextType;if(e.context="object"==typeof i&&null!==i?i._currentValue:r,"function"==typeof(i=t.getDerivedStateFromProps)&&(o=null==(i=i(n,o))?o:nt({},o,i),e.state=o),"function"!=typeof t.getDerivedStateFromProps&&"function"!=typeof e.getSnapshotBeforeUpdate&&("function"==typeof e.UNSAFE_componentWillMount||"function"==typeof e.componentWillMount))if(t=e.state,"function"==typeof e.componentWillMount&&e.componentWillMount(),"function"==typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),t!==e.state&&Pt.enqueueReplaceState(e,e.state,null),null!==a.queue&&0<a.queue.length)if(t=a.queue,i=a.replace,a.queue=null,a.replace=!1,i&&1===t.length)e.state=t[0];else{for(a=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var s=t[i];null!=(s="function"==typeof s?s.call(e,a,n,r):s)&&(o?(o=!1,a=nt({},a,s)):nt(a,s))}e.state=a}else a.queue=null}var Ot={id:1,overflow:""};function At(e,t,n){var r=e.id;e=e.overflow;var o=32-Mt(r)-1;r&=~(1<<o),n+=1;var a=32-Mt(t)+o;if(30<a){var i=o-o%5;return a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,{id:1<<32-Mt(t)+o|n<<o|r,overflow:a+e}}return{id:1<<a|n<<o|r,overflow:e}}var Mt=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(jt(e)/Lt|0)|0},jt=Math.log,Lt=Math.LN2,Dt="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Bt=null,Nt=null,Ht=null,zt=null,Vt=!1,$t=!1,qt=0,Ut=null,Wt=0;function Yt(){if(null===Bt)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");return Bt}function Xt(){if(0<Wt)throw Error("Rendered more hooks than during the previous render");return{memoizedState:null,queue:null,next:null}}function Zt(){return null===zt?null===Ht?(Vt=!1,Ht=zt=Xt()):(Vt=!0,zt=Ht):null===zt.next?(Vt=!1,zt=zt.next=Xt()):(Vt=!0,zt=zt.next),zt}function Jt(){Nt=Bt=null,$t=!1,Ht=null,Wt=0,zt=Ut=null}function Gt(e,t){return"function"==typeof t?t(e):t}function Kt(e,t,n){if(Bt=Yt(),zt=Zt(),Vt){var r=zt.queue;if(t=r.dispatch,null!==Ut&&void 0!==(n=Ut.get(r))){Ut.delete(r),r=zt.memoizedState;do{r=e(r,n.action),n=n.next}while(null!==n);return zt.memoizedState=r,[r,t]}return[zt.memoizedState,t]}return e=e===Gt?"function"==typeof t?t():t:void 0!==n?n(t):t,zt.memoizedState=e,e=(e=zt.queue={last:null,dispatch:null}).dispatch=en.bind(null,Bt,e),[zt.memoizedState,e]}function Qt(e,t){if(Bt=Yt(),t=void 0===t?null:t,null!==(zt=Zt())){var n=zt.memoizedState;if(null!==n&&null!==t){var r=n[1];e:if(null===r)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!Dt(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),zt.memoizedState=[e,t],e}function en(e,t,n){if(25<=Wt)throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");if(e===Bt)if($t=!0,e={action:n,next:null},null===Ut&&(Ut=new Map),void 0===(n=Ut.get(t)))Ut.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}}function tn(){throw Error("startTransition cannot be called during server rendering.")}function nn(){}var rn={readContext:function(e){return e._currentValue},useContext:function(e){return Yt(),e._currentValue},useMemo:Qt,useReducer:Kt,useRef:function(e){Bt=Yt();var t=(zt=Zt()).memoizedState;return null===t?(e={current:e},zt.memoizedState=e):t},useState:function(e){return Kt(Gt,e)},useInsertionEffect:nn,useLayoutEffect:function(){},useCallback:function(e,t){return Qt((function(){return e}),t)},useImperativeHandle:nn,useEffect:nn,useDebugValue:nn,useDeferredValue:function(e){return Yt(),e},useTransition:function(){return Yt(),[!1,tn]},useId:function(){var e=Nt.treeContext,t=e.overflow;e=((e=e.id)&~(1<<32-Mt(e)-1)).toString(32)+t;var n=on;if(null===n)throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");return t=qt++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Yt(),t(e._source)},useSyncExternalStore:function(e,t,n){if(void 0===n)throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");return n()}},on=null,an=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function sn(e){return console.error(e),null}function ln(){}function un(e,t,n,r,o,a,i,s){e.allPendingTasks++,null===n?e.pendingRootTasks++:n.pendingTasks++;var l={node:t,ping:function(){return function(e,t){var n=e.pingedTasks;n.push(t),1===n.length&&setImmediate((function(){return Tn(e)}))}(e,l)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:a,context:i,treeContext:s};return o.add(l),l}function cn(e,t,n,r,o,a){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:a}}function dn(e,t){if(null!=(e=e.onError(t))&&"string"!=typeof e)throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function fn(e,t){var n=e.onShellError;n(t),(n=e.onFatalError)(t),null!==e.destination?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function pn(e,t,n,r,o){for(Bt={},Nt=t,qt=0,e=n(r,o);$t;)$t=!1,qt=0,Wt+=1,zt=null,e=n(r,o);return Jt(),e}function hn(e,t,n,r){var o=n.render(),a=r.childContextTypes;if(null!=a){var i=t.legacyContext;if("function"!=typeof n.getChildContext)r=i;else{for(var s in n=n.getChildContext())if(!(s in a))throw Error((St(r)||"Unknown")+'.getChildContext(): key "'+s+'" is not defined in childContextTypes.');r=nt({},i,n)}t.legacyContext=r,yn(e,t,o),t.legacyContext=i}else yn(e,t,o)}function gn(e,t){if(e&&e.defaultProps){for(var n in t=nt({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function mn(e,t,n,r,a){if("function"==typeof n)if(n.prototype&&n.prototype.isReactComponent){a=xt(n,t.legacyContext);var i=n.contextType;_t(i=new n(r,"object"==typeof i&&null!==i?i._currentValue:a),n,r,a),hn(e,t,i,n)}else{a=pn(e,t,n,r,i=xt(n,t.legacyContext));var s=0!==qt;if("object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof)_t(a,n,r,i),hn(e,t,a,n);else if(s){r=t.treeContext,t.treeContext=At(r,1,0);try{yn(e,t,a)}finally{t.treeContext=r}}else yn(e,t,a)}else{if("string"!=typeof n){switch(n){case yt:case mt:case it:case st:case at:case ft:return void yn(e,t,r.children);case gt:throw Error("ReactDOMServer does not yet support scope components.");case dt:e:{n=t.blockedBoundary,a=t.blockedSegment,i=r.fallback,r=r.children;var l={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:s=new Set,errorDigest:null},u=cn(0,a.chunks.length,l,a.formatContext,!1,!1);a.children.push(u),a.lastPushedText=!1;var c=cn(0,0,null,a.formatContext,!1,!1);c.parentFlushed=!0,t.blockedBoundary=l,t.blockedSegment=c;try{if(vn(e,t,r),c.lastPushedText&&c.textEmbedded&&c.chunks.push(B),c.status=1,xn(l,c),0===l.pendingTasks)break e}catch(t){c.status=4,l.forceClientRender=!0,l.errorDigest=dn(e,t)}finally{t.blockedBoundary=n,t.blockedSegment=a}t=un(e,i,n,u,s,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if("object"==typeof n&&null!==n)switch(n.$$typeof){case ct:if(r=pn(e,t,n.render,r,a),0!==qt){n=t.treeContext,t.treeContext=At(n,1,0);try{yn(e,t,r)}finally{t.treeContext=n}}else yn(e,t,r);return;case pt:return void mn(e,t,n=n.type,r=gn(n,r),a);case lt:if(a=r.children,n=n._context,r=r.value,i=n._currentValue,n._currentValue=r,kt=r={parent:s=kt,depth:null===s?0:s.depth+1,context:n,parentValue:i,value:r},t.context=r,yn(e,t,a),null===(e=kt))throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");return r=e.parentValue,e.context._currentValue=r===bt?e.context._defaultValue:r,e=kt=e.parent,void(t.context=e);case ut:return void yn(e,t,r=(r=r.children)(n._currentValue));case ht:return void mn(e,t,n=(a=n._init)(n._payload),r=gn(n,r),void 0)}throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==n?n:typeof n)+".")}switch(i=function(e,t,n,r,a){switch(t){case"select":e.push(oe("select"));var i=null,s=null;for(d in n)if(h.call(n,d)){var l=n[d];if(null!=l)switch(d){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"defaultValue":case"value":break;default:Z(e,r,d,l)}}return e.push(J),K(e,s,i),i;case"option":s=a.selectedValue,e.push(oe("option"));var u=l=null,c=null,d=null;for(i in n)if(h.call(n,i)){var f=n[i];if(null!=f)switch(i){case"children":l=f;break;case"selected":c=f;break;case"dangerouslySetInnerHTML":d=f;break;case"value":u=f;default:Z(e,r,i,f)}}if(null!=s)if(n=null!==u?""+u:function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(l),I(s)){for(r=0;r<s.length;r++)if(""+s[r]===n){e.push(Q);break}}else""+s===n&&e.push(Q);else c&&e.push(Q);return e.push(J),K(e,d,l),l;case"textarea":for(l in e.push(oe("textarea")),d=s=i=null,n)if(h.call(n,l)&&null!=(u=n[l]))switch(l){case"children":d=u;break;case"value":i=u;break;case"defaultValue":s=u;break;case"dangerouslySetInnerHTML":throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");default:Z(e,r,l,u)}if(null===i&&null!==s&&(i=s),e.push(J),null!=d){if(null!=i)throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(I(d)&&1<d.length)throw Error("<textarea> can only have at most one child.");i=""+d}return"string"==typeof i&&"\n"===i[0]&&e.push(te),null!==i&&e.push(E(""+i)),null;case"input":for(s in e.push(oe("input")),u=d=l=i=null,n)if(h.call(n,s)&&null!=(c=n[s]))switch(s){case"children":case"dangerouslySetInnerHTML":throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");case"defaultChecked":u=c;break;case"defaultValue":l=c;break;case"checked":d=c;break;case"value":i=c;break;default:Z(e,r,s,c)}return null!==d?Z(e,r,"checked",d):null!==u&&Z(e,r,"checked",u),null!==i?Z(e,r,"value",i):null!==l&&Z(e,r,"value",l),e.push(G),null;case"menuitem":for(var p in e.push(oe("menuitem")),n)if(h.call(n,p)&&null!=(i=n[p]))switch(p){case"children":case"dangerouslySetInnerHTML":throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");default:Z(e,r,p,i)}return e.push(J),null;case"title":for(f in e.push(oe("title")),i=null,n)if(h.call(n,f)&&null!=(s=n[f]))switch(f){case"children":i=s;break;case"dangerouslySetInnerHTML":throw Error("`dangerouslySetInnerHTML` does not make sense on <title>.");default:Z(e,r,f,s)}return e.push(J),i;case"listing":case"pre":for(u in e.push(oe(t)),s=i=null,n)if(h.call(n,u)&&null!=(l=n[u]))switch(u){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;default:Z(e,r,u,l)}if(e.push(J),null!=s){if(null!=i)throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof s||!("__html"in s))throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");null!=(n=s.__html)&&("string"==typeof n&&0<n.length&&"\n"===n[0]?e.push(te,n):e.push(""+n))}return"string"==typeof i&&"\n"===i[0]&&e.push(te),i;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":for(var g in e.push(oe(t)),n)if(h.call(n,g)&&null!=(i=n[g]))switch(g){case"children":case"dangerouslySetInnerHTML":throw Error(t+" is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");default:Z(e,r,g,i)}return e.push(G),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return ee(e,n,t,r);case"html":return 0===a.insertionMode&&e.push(ae),ee(e,n,t,r);default:if(-1===t.indexOf("-")&&"string"!=typeof n.is)return ee(e,n,t,r);for(c in e.push(oe(t)),s=i=null,n)if(h.call(n,c)&&null!=(l=n[c]))switch(c){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"style":q(e,r,l);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:b(c)&&"function"!=typeof l&&"symbol"!=typeof l&&e.push(U,c,W,E(l),Y)}return e.push(J),K(e,s,i),i}}((a=t.blockedSegment).chunks,n,r,e.responseState,a.formatContext),a.lastPushedText=!1,s=a.formatContext,a.formatContext=function(e,t,n){switch(t){case"select":return D(1,null!=n.value?n.value:n.defaultValue);case"svg":return D(2,null);case"math":return D(3,null);case"foreignObject":return D(1,null);case"table":return D(4,null);case"thead":case"tbody":case"tfoot":return D(5,null);case"colgroup":return D(7,null);case"tr":return D(6,null)}return 4<=e.insertionMode||0===e.insertionMode?D(1,null):e}(s,n,r),vn(e,t,i),a.formatContext=s,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:a.chunks.push(ie,n,se)}a.lastPushedText=!1}}function yn(e,t,n){if(t.node=n,"object"==typeof n&&null!==n){switch(n.$$typeof){case rt:return void mn(e,t,n.type,n.props,n.ref);case ot:throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");case ht:var r=n._init;return void yn(e,t,n=r(n._payload))}if(I(n))return void bn(e,t,n);if((r=null===n||"object"!=typeof n?null:"function"==typeof(r=vt&&n[vt]||n["@@iterator"])?r:null)&&(r=r.call(n))){if(!(n=r.next()).done){var o=[];do{o.push(n.value),n=r.next()}while(!n.done);bn(e,t,o)}return}throw e=Object.prototype.toString.call(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.")}"string"==typeof n?(r=t.blockedSegment).lastPushedText=N(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText):"number"==typeof n&&((r=t.blockedSegment).lastPushedText=N(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function bn(e,t,n){for(var r=n.length,o=0;o<r;o++){var a=t.treeContext;t.treeContext=At(a,r,o);try{vn(e,t,n[o])}finally{t.treeContext=a}}}function vn(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,a=t.context;try{return yn(e,t,n)}catch(l){if(Jt(),"object"!=typeof l||null===l||"function"!=typeof l.then)throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,It(a),l;n=l;var i=t.blockedSegment,s=cn(0,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(s),i.lastPushedText=!1,e=un(e,t.node,t.blockedBoundary,s,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=a,It(a)}}function Sn(e){var t=e.blockedBoundary;(e=e.blockedSegment).status=3,kn(this,t,e)}function wn(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,null===r?(t.allPendingTasks--,2!==t.status&&(t.status=2,null!==t.destination&&t.destination.end())):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,r.errorDigest=t.onError(void 0===n?Error("The render was aborted by the server without a reason."):n),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach((function(e){return wn(e,t,n)})),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,0===t.allPendingTasks&&(e=t.onAllReady)())}function xn(e,t){if(0===t.chunks.length&&1===t.children.length&&null===t.children[0].boundary){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,1===n.status&&xn(e,n)}else e.completedSegments.push(t)}function kn(e,t,n){if(null===t){if(n.parentFlushed){if(null!==e.completedRootSegment)throw Error("There can only be one root segment. This is a bug in React.");e.completedRootSegment=n}e.pendingRootTasks--,0===e.pendingRootTasks&&(e.onShellError=ln,(t=e.onShellReady)())}else t.pendingTasks--,t.forceClientRender||(0===t.pendingTasks?(n.parentFlushed&&1===n.status&&xn(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Sn,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&1===n.status&&(xn(t,n),1===t.completedSegments.length&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,0===e.allPendingTasks&&(e=e.onAllReady)()}function Tn(e){if(2!==e.status){var t=kt,n=an.current;an.current=rn;var r=on;on=e.responseState;try{var o,a=e.pingedTasks;for(o=0;o<a.length;o++){var i=a[o],s=e,l=i.blockedSegment;if(0===l.status){It(i.context);try{yn(s,i,i.node),l.lastPushedText&&l.textEmbedded&&l.chunks.push(B),i.abortSet.delete(i),l.status=1,kn(s,i.blockedBoundary,l)}catch(e){if(Jt(),"object"==typeof e&&null!==e&&"function"==typeof e.then){var u=i.ping;e.then(u,u)}else{i.abortSet.delete(i),l.status=4;var c=i.blockedBoundary,d=e,f=dn(s,d);null===c?fn(s,d):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=f,c.parentFlushed&&s.clientRenderedBoundaries.push(c))),s.allPendingTasks--,0===s.allPendingTasks&&(0,s.onAllReady)()}}}}a.splice(0,o),null!==e.destination&&Pn(e,e.destination)}catch(t){dn(e,t),fn(e,t)}finally{on=r,an.current=n,n===rn&&It(t)}}}function Cn(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,l(t,le),l(t,e.placeholderPrefix),l(t,e=r.toString(16)),c(t,ue);case 1:n.status=2;var o=!0;r=n.chunks;var a=0;n=n.children;for(var i=0;i<n.length;i++){for(o=n[i];a<o.index;a++)l(t,r[a]);o=En(e,t,o)}for(;a<r.length-1;a++)l(t,r[a]);return a<r.length&&(o=c(t,r[a])),o;default:throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.")}}function En(e,t,n){var r=n.boundary;if(null===r)return Cn(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)r=r.errorDigest,c(t,pe),l(t,ge),r&&(l(t,ye),l(t,E(r)),l(t,me)),c(t,be),Cn(e,t,n);else if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var o=e.responseState,a=o.nextSuspenseID++;o=p(o.boundaryPrefix+a.toString(16)),r=r.id=o,ve(t,e.responseState,r),Cn(e,t,n)}else if(r.byteSize>e.progressiveChunkSize)r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),ve(t,e.responseState,r.id),Cn(e,t,n);else{if(c(t,ce),1!==(n=r.completedSegments).length)throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");En(e,t,n[0])}return c(t,he)}function Rn(e,t,n){return function(e,t,n,r){switch(n.insertionMode){case 0:case 1:return l(e,Se),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,we);case 2:return l(e,ke),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Te);case 3:return l(e,Ee),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Re);case 4:return l(e,Ie),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Pe);case 5:return l(e,Oe),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Ae);case 6:return l(e,je),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Le);case 7:return l(e,Be),l(e,t.segmentPrefix),l(e,r.toString(16)),c(e,Ne);default:throw Error("Unknown insertion mode. This is a bug in React.")}}(t,e.responseState,n.formatContext,n.id),En(e,t,n),function(e,t){switch(t.insertionMode){case 0:case 1:return c(e,xe);case 2:return c(e,Ce);case 3:return c(e,Fe);case 4:return c(e,_e);case 5:return c(e,Me);case 6:return c(e,De);case 7:return c(e,He);default:throw Error("Unknown insertion mode. This is a bug in React.")}}(t,n.formatContext)}function Fn(e,t,n){for(var r=n.completedSegments,o=0;o<r.length;o++)In(e,t,n,r[o]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,l(t,e.startInlineScript),e.sentCompleteBoundaryFunction?l(t,We):(e.sentCompleteBoundaryFunction=!0,l(t,Ue)),null===r)throw Error("An ID must have been assigned before we can complete the boundary.");return n=n.toString(16),l(t,r),l(t,Ye),l(t,e.segmentPrefix),l(t,n),c(t,Xe)}function In(e,t,n,r){if(2===r.status)return!0;var o=r.id;if(-1===o){if(-1===(r.id=n.rootSegmentID))throw Error("A root segment ID must have been assigned by now. This is a bug in React.");return Rn(e,t,r)}return Rn(e,t,r),l(t,(e=e.responseState).startInlineScript),e.sentCompleteSegmentFunction?l(t,Ve):(e.sentCompleteSegmentFunction=!0,l(t,ze)),l(t,e.segmentPrefix),l(t,o=o.toString(16)),l(t,$e),l(t,e.placeholderPrefix),l(t,o),c(t,qe)}function Pn(e,t){a=new Uint8Array(2048),i=0,s=!0;try{var n=e.completedRootSegment;if(null!==n&&0===e.pendingRootTasks){En(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)l(t,r[n]);n<r.length&&c(t,r[n])}var o,u=e.clientRenderedBoundaries;for(o=0;o<u.length;o++){var f=u[o];r=t;var p=e.responseState,h=f.id,g=f.errorDigest,m=f.errorMessage,y=f.errorComponentStack;if(l(r,p.startInlineScript),p.sentClientRenderFunction?l(r,Je):(p.sentClientRenderFunction=!0,l(r,Ze)),null===h)throw Error("An ID must have been assigned before we can complete the boundary.");if(l(r,h),l(r,Ge),(g||m||y)&&(l(r,Qe),l(r,tt(g||""))),(m||y)&&(l(r,Qe),l(r,tt(m||""))),y&&(l(r,Qe),l(r,tt(y))),!c(r,Ke))return e.destination=null,o++,void u.splice(0,o)}u.splice(0,o);var b=e.completedBoundaries;for(o=0;o<b.length;o++)if(!Fn(e,t,b[o]))return e.destination=null,o++,void b.splice(0,o);b.splice(0,o),d(t),a=new Uint8Array(2048),i=0,s=!0;var v=e.partialBoundaries;for(o=0;o<v.length;o++){var S=v[o];e:{u=e,f=t;var w=S.completedSegments;for(p=0;p<w.length;p++)if(!In(u,f,S,w[p])){p++,w.splice(0,p);var x=!1;break e}w.splice(0,p),x=!0}if(!x)return e.destination=null,o++,void v.splice(0,o)}v.splice(0,o);var k=e.completedBoundaries;for(o=0;o<k.length;o++)if(!Fn(e,t,k[o]))return e.destination=null,o++,void k.splice(0,o);k.splice(0,o)}finally{d(t),"function"==typeof t.flush&&t.flush(),0===e.allPendingTasks&&0===e.pingedTasks.length&&0===e.clientRenderedBoundaries.length&&0===e.completedBoundaries.length&&t.end()}}function _n(e,t){if(1===e.status)e.status=2,t.destroy(e.fatalError);else if(2!==e.status&&null===e.destination){e.destination=t;try{Pn(e,t)}catch(t){dn(e,t),fn(e,t)}}}function On(e,t){try{var n=e.abortableTasks;n.forEach((function(n){return wn(n,e,t)})),n.clear(),null!==e.destination&&Pn(e,e.destination)}catch(t){dn(e,t),fn(e,t)}}function An(e,t){return function(){return On(e,t)}}t.renderToPipeableStream=function(e,t){var n=function(e,t){var n=t?t.identifierPrefix:void 0,r=t?t.nonce:void 0,o=t?t.bootstrapScriptContent:void 0,a=t?t.bootstrapScripts:void 0,i=t?t.bootstrapModules:void 0;n=void 0===n?"":n,r=void 0===r?P:p('<script nonce="'+E(r)+'">');var s=[];if(void 0!==o&&s.push(r,(""+o).replace(j,L),_),void 0!==a)for(o=0;o<a.length;o++)s.push(O,E(a[o]),M);if(void 0!==i)for(a=0;a<i.length;a++)s.push(A,E(i[a]),M);i={bootstrapChunks:s,startInlineScript:r,placeholderPrefix:p(n+"P:"),segmentPrefix:p(n+"S:"),boundaryPrefix:n+"B:",idPrefix:n,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1},a=D("http://www.w3.org/2000/svg"===(a=t?t.namespaceURI:void 0)?2:"http://www.w3.org/1998/Math/MathML"===a?3:0,null),o=t?t.progressiveChunkSize:void 0,r=t?t.onError:void 0,s=t?t.onAllReady:void 0;var l=t?t.onShellReady:void 0,u=t?t.onShellError:void 0;return t=[],i={destination:null,responseState:i,progressiveChunkSize:void 0===o?12800:o,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:n=new Set,pingedTasks:t,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:void 0===r?sn:r,onAllReady:void 0===s?ln:s,onShellReady:void 0===l?ln:l,onShellError:void 0===u?ln:u,onFatalError:ln},(a=cn(0,0,null,a,!1,!1)).parentFlushed=!0,e=un(i,e,null,a,n,wt,null,Ot),t.push(e),i}(e,t),r=!1;return function(e){setImmediate((function(){return Tn(e)}))}(n),{pipe:function(e){if(r)throw Error("React currently only supports piping to one writable stream.");return r=!0,_n(n,e),e.on("drain",function(e,t){return function(){return _n(t,e)}}(e,n)),e.on("error",An(n,Error("The destination stream errored while writing data."))),e.on("close",An(n,Error("The destination stream closed early."))),e},abort:function(e){On(n,e)}}},t.version="18.2.0"},9651:(e,t,n)=>{var r,o;r=n(2637),o=n(390),r.version,r.renderToString,r.renderToStaticMarkup,r.renderToNodeStream,r.renderToStaticNodeStream,t.$f=o.renderToPipeableStream},4335:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,r="function"==typeof Set,o="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function a(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var s,l,u,c;if(Array.isArray(e)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(!a(e[l],i[l]))return!1;return!0}if(n&&e instanceof Map&&i instanceof Map){if(e.size!==i.size)return!1;for(c=e.entries();!(l=c.next()).done;)if(!i.has(l.value[0]))return!1;for(c=e.entries();!(l=c.next()).done;)if(!a(l.value[1],i.get(l.value[0])))return!1;return!0}if(r&&e instanceof Set&&i instanceof Set){if(e.size!==i.size)return!1;for(c=e.entries();!(l=c.next()).done;)if(!i.has(l.value[0]))return!1;return!0}if(o&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(i)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(e[l]!==i[l])return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf&&"function"==typeof e.valueOf&&"function"==typeof i.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString&&"function"==typeof e.toString&&"function"==typeof i.toString)return e.toString()===i.toString();if((s=(u=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(l=s;0!=l--;)if(!Object.prototype.hasOwnProperty.call(i,u[l]))return!1;if(t&&e instanceof Element)return!1;for(l=s;0!=l--;)if(("_owner"!==u[l]&&"__v"!==u[l]&&"__o"!==u[l]||!e.$$typeof)&&!a(e[u[l]],i[u[l]]))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,t){try{return a(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},5738:(e,t,n)=>{var r,o=n(104),a=(r=o)&&"object"==typeof r&&"default"in r?r.default:r;function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=function(e,t,n){if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if(void 0!==n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(r){if("function"!=typeof r)throw new Error("Expected WrappedComponent to be a React component.");var l,u=[];function c(){l=e(u.map((function(e){return e.props}))),d.canUseDOM?t(l):n&&(l=n(l))}var d=function(e){var t,n;function o(){return e.apply(this,arguments)||this}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,o.peek=function(){return l},o.rewind=function(){if(o.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=l;return l=void 0,u=[],e};var i=o.prototype;return i.UNSAFE_componentWillMount=function(){u.push(this),c()},i.componentDidUpdate=function(){c()},i.componentWillUnmount=function(){var e=u.indexOf(this);u.splice(e,1),c()},i.render=function(){return a.createElement(r,this.props)},o}(o.PureComponent);return i(d,"displayName","SideEffect("+function(e){return e.displayName||e.name||"Component"}(r)+")"),i(d,"canUseDOM",s),d}}},1426:(e,t,n)=>{var r=n(104),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,n){var r,l={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:l,_owner:i.current}}t.jsx=l,t.jsxs=l},4246:(e,t,n)=>{e.exports=n(1426)},6194:(e,t,n)=>{n.r(t),n.d(t,{default:()=>se});var r,o,a,i,s=n(4246),l=n(3615),u=n.n(l),c=n(5738),d=n.n(c),f=n(4335),p=n.n(f),h=n(104),g=n.n(h),m=n(2525),y=n.n(m),b="bodyAttributes",v="htmlAttributes",S={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title"},w=(Object.keys(S).map((function(e){return S[e]})),"charset"),x="cssText",k="href",T="innerHTML",C="itemprop",E="rel",R={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},F=Object.keys(R).reduce((function(e,t){return e[R[t]]=t,e}),{}),I=[S.NOSCRIPT,S.SCRIPT,S.STYLE],P="data-react-helmet",_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},j=function(e){return!1===(!(arguments.length>1&&void 0!==arguments[1])||arguments[1])?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},L=function(e){var t=z(e,S.TITLE),n=z(e,"titleTemplate");if(n&&t)return n.replace(/%s/g,(function(){return Array.isArray(t)?t.join(""):t}));var r=z(e,"defaultTitle");return t||r||void 0},D=function(e){return z(e,"onChangeClientState")||function(){}},B=function(e,t){return t.filter((function(t){return void 0!==t[e]})).map((function(t){return t[e]})).reduce((function(e,t){return A({},e,t)}),{})},N=function(e,t){return t.filter((function(e){return void 0!==e[S.BASE]})).map((function(e){return e[S.BASE]})).reverse().reduce((function(t,n){if(!t.length)for(var r=Object.keys(n),o=0;o<r.length;o++){var a=r[o].toLowerCase();if(-1!==e.indexOf(a)&&n[a])return t.concat(n)}return t}),[])},H=function(e,t,n){var r={};return n.filter((function(t){return!!Array.isArray(t[e])||(void 0!==t[e]&&W("Helmet: "+e+' should be of type "Array". Instead found type "'+_(t[e])+'"'),!1)})).map((function(t){return t[e]})).reverse().reduce((function(e,n){var o={};n.filter((function(e){for(var n=void 0,a=Object.keys(e),i=0;i<a.length;i++){var s=a[i],l=s.toLowerCase();-1===t.indexOf(l)||n===E&&"canonical"===e[n].toLowerCase()||l===E&&"stylesheet"===e[l].toLowerCase()||(n=l),-1===t.indexOf(s)||s!==T&&s!==x&&s!==C||(n=s)}if(!n||!e[n])return!1;var u=e[n].toLowerCase();return r[n]||(r[n]={}),o[n]||(o[n]={}),!r[n][u]&&(o[n][u]=!0,!0)})).reverse().forEach((function(t){return e.push(t)}));for(var a=Object.keys(o),i=0;i<a.length;i++){var s=a[i],l=y()({},r[s],o[s]);r[s]=l}return e}),[]).reverse()},z=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.hasOwnProperty(t))return r[t]}return null},V=(r=Date.now(),function(e){var t=Date.now();t-r>16?(r=t,e(t)):setTimeout((function(){V(e)}),0)}),$=function(e){return clearTimeout(e)},q="undefined"!=typeof window?window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||V:n.g.requestAnimationFrame||V,U="undefined"!=typeof window?window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||$:n.g.cancelAnimationFrame||$,W=function(e){return console&&"function"==typeof console.warn&&console.warn(e)},Y=null,X=function(e,t){var n=e.baseTag,r=e.bodyAttributes,o=e.htmlAttributes,a=e.linkTags,i=e.metaTags,s=e.noscriptTags,l=e.onChangeClientState,u=e.scriptTags,c=e.styleTags,d=e.title,f=e.titleAttributes;G(S.BODY,r),G(S.HTML,o),J(d,f);var p={baseTag:K(S.BASE,n),linkTags:K(S.LINK,a),metaTags:K(S.META,i),noscriptTags:K(S.NOSCRIPT,s),scriptTags:K(S.SCRIPT,u),styleTags:K(S.STYLE,c)},h={},g={};Object.keys(p).forEach((function(e){var t=p[e],n=t.newTags,r=t.oldTags;n.length&&(h[e]=n),r.length&&(g[e]=p[e].oldTags)})),t&&t(),l(e,h,g)},Z=function(e){return Array.isArray(e)?e.join(""):e},J=function(e,t){void 0!==e&&document.title!==e&&(document.title=Z(e)),G(S.TITLE,t)},G=function(e,t){var n=document.getElementsByTagName(e)[0];if(n){for(var r=n.getAttribute(P),o=r?r.split(","):[],a=[].concat(o),i=Object.keys(t),s=0;s<i.length;s++){var l=i[s],u=t[l]||"";n.getAttribute(l)!==u&&n.setAttribute(l,u),-1===o.indexOf(l)&&o.push(l);var c=a.indexOf(l);-1!==c&&a.splice(c,1)}for(var d=a.length-1;d>=0;d--)n.removeAttribute(a[d]);o.length===a.length?n.removeAttribute(P):n.getAttribute(P)!==i.join(",")&&n.setAttribute(P,i.join(","))}},K=function(e,t){var n=document.head||document.querySelector(S.HEAD),r=n.querySelectorAll(e+"["+P+"]"),o=Array.prototype.slice.call(r),a=[],i=void 0;return t&&t.length&&t.forEach((function(t){var n=document.createElement(e);for(var r in t)if(t.hasOwnProperty(r))if(r===T)n.innerHTML=t.innerHTML;else if(r===x)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var s=void 0===t[r]?"":t[r];n.setAttribute(r,s)}n.setAttribute(P,"true"),o.some((function(e,t){return i=t,n.isEqualNode(e)}))?o.splice(i,1):a.push(n)})),o.forEach((function(e){return e.parentNode.removeChild(e)})),a.forEach((function(e){return n.appendChild(e)})),{oldTags:o,newTags:a}},Q=function(e){return Object.keys(e).reduce((function(t,n){var r=void 0!==e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+r:r}),"")},ee=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[R[n]||n]=e[n],t}),t)},te=function(e,t,n){switch(e){case S.TITLE:return{toComponent:function(){return e=t.title,n=t.titleAttributes,(r={key:e})[P]=!0,o=ee(n,r),[g().createElement(S.TITLE,o,e)];var e,n,r,o},toString:function(){return function(e,t,n,r){var o=Q(n),a=Z(t);return o?"<"+e+" "+P+'="true" '+o+">"+j(a,r)+"</"+e+">":"<"+e+" "+P+'="true">'+j(a,r)+"</"+e+">"}(e,t.title,t.titleAttributes,n)}};case b:case v:return{toComponent:function(){return ee(t)},toString:function(){return Q(t)}};default:return{toComponent:function(){return function(e,t){return t.map((function(t,n){var r,o=((r={key:n})[P]=!0,r);return Object.keys(t).forEach((function(e){var n=R[e]||e;if(n===T||n===x){var r=t.innerHTML||t.cssText;o.dangerouslySetInnerHTML={__html:r}}else o[n]=t[e]})),g().createElement(e,o)}))}(e,t)},toString:function(){return function(e,t,n){return t.reduce((function(t,r){var o=Object.keys(r).filter((function(e){return!(e===T||e===x)})).reduce((function(e,t){var o=void 0===r[t]?t:t+'="'+j(r[t],n)+'"';return e?e+" "+o:o}),""),a=r.innerHTML||r.cssText||"",i=-1===I.indexOf(e);return t+"<"+e+" "+P+'="true" '+o+(i?"/>":">"+a+"</"+e+">")}),"")}(e,t,n)}}}},ne=function(e){var t=e.baseTag,n=e.bodyAttributes,r=e.encode,o=e.htmlAttributes,a=e.linkTags,i=e.metaTags,s=e.noscriptTags,l=e.scriptTags,u=e.styleTags,c=e.title,d=void 0===c?"":c,f=e.titleAttributes;return{base:te(S.BASE,t,r),bodyAttributes:te(b,n,r),htmlAttributes:te(v,o,r),link:te(S.LINK,a,r),meta:te(S.META,i,r),noscript:te(S.NOSCRIPT,s,r),script:te(S.SCRIPT,l,r),style:te(S.STYLE,u,r),title:te(S.TITLE,{title:d,titleAttributes:f},r)}},re=d()((function(e){return{baseTag:N([k,"target"],e),bodyAttributes:B(b,e),defer:z(e,"defer"),encode:z(e,"encodeSpecialCharacters"),htmlAttributes:B(v,e),linkTags:H(S.LINK,[E,k],e),metaTags:H(S.META,["name",w,"http-equiv","property",C],e),noscriptTags:H(S.NOSCRIPT,[T],e),onChangeClientState:D(e),scriptTags:H(S.SCRIPT,["src",T],e),styleTags:H(S.STYLE,[x],e),title:L(e),titleAttributes:B("titleAttributes",e)}}),(function(e){Y&&U(Y),e.defer?Y=q((function(){X(e,(function(){Y=null}))})):(X(e),Y=null)}),ne)((function(){return null})),oe=(o=re,i=a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.shouldComponentUpdate=function(e){return!p()(this.props,e)},t.prototype.mapNestedChildrenToProps=function(e,t){if(!t)return null;switch(e.type){case S.SCRIPT:case S.NOSCRIPT:return{innerHTML:t};case S.STYLE:return{cssText:t}}throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")},t.prototype.flattenArrayTypeChildren=function(e){var t,n=e.child,r=e.arrayTypeChildren,o=e.newChildProps,a=e.nestedChildren;return A({},r,((t={})[n.type]=[].concat(r[n.type]||[],[A({},o,this.mapNestedChildrenToProps(n,a))]),t))},t.prototype.mapObjectTypeChildren=function(e){var t,n,r=e.child,o=e.newProps,a=e.newChildProps,i=e.nestedChildren;switch(r.type){case S.TITLE:return A({},o,((t={})[r.type]=i,t.titleAttributes=A({},a),t));case S.BODY:return A({},o,{bodyAttributes:A({},a)});case S.HTML:return A({},o,{htmlAttributes:A({},a)})}return A({},o,((n={})[r.type]=A({},a),n))},t.prototype.mapArrayTypeChildrenToProps=function(e,t){var n=A({},t);return Object.keys(e).forEach((function(t){var r;n=A({},n,((r={})[t]=e[t],r))})),n},t.prototype.warnOnInvalidChildren=function(e,t){return!0},t.prototype.mapChildrenToProps=function(e,t){var n=this,r={};return g().Children.forEach(e,(function(e){if(e&&e.props){var o=e.props,a=o.children,i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object.keys(e).reduce((function(t,n){return t[F[n]||n]=e[n],t}),t)}(M(o,["children"]));switch(n.warnOnInvalidChildren(e,a),e.type){case S.LINK:case S.META:case S.NOSCRIPT:case S.SCRIPT:case S.STYLE:r=n.flattenArrayTypeChildren({child:e,arrayTypeChildren:r,newChildProps:i,nestedChildren:a});break;default:t=n.mapObjectTypeChildren({child:e,newProps:t,newChildProps:i,nestedChildren:a})}}})),t=this.mapArrayTypeChildrenToProps(r,t)},t.prototype.render=function(){var e=this.props,t=e.children,n=M(e,["children"]),r=A({},n);return t&&(r=this.mapChildrenToProps(t,r)),g().createElement(o,r)},O(t,null,[{key:"canUseDOM",set:function(e){o.canUseDOM=e}}]),t}(g().Component),a.propTypes={base:u().object,bodyAttributes:u().object,children:u().oneOfType([u().arrayOf(u().node),u().node]),defaultTitle:u().string,defer:u().bool,encodeSpecialCharacters:u().bool,htmlAttributes:u().object,link:u().arrayOf(u().object),meta:u().arrayOf(u().object),noscript:u().arrayOf(u().object),onChangeClientState:u().func,script:u().arrayOf(u().object),style:u().arrayOf(u().object),title:u().string,titleAttributes:u().object,titleTemplate:u().string},a.defaultProps={defer:!0,encodeSpecialCharacters:!0},a.peek=o.peek,a.rewind=function(){var e=o.rewind();return e||(e=ne({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}})),e},i);oe.renderStatic=oe.rewind;var ae=n(9651);const ie=()=>{const[e,t]=g().useState("");return(0,s.jsxs)("div",{style:{padding:"1rem",borderRadius:"0.25rem",border:"4px dashed #fc451e"},children:[(0,s.jsx)(oe,{children:(0,s.jsx)("title",{children:"SSR MF Example"})}),(0,s.jsxs)("div",{style:{padding:"1rem"},children:[(0,s.jsx)("h1",{children:"Module Federation Example: Server Side Rendering"}),(0,s.jsx)("h2",{children:"This is the shell application."}),(0,s.jsx)("p",{children:"You can try to disable JavaScript and reload the page."})]}),(0,s.jsxs)("div",{style:{padding:"1rem"},children:[(0,s.jsx)("h3",{children:"Type something into this input"}),(0,s.jsx)("input",{type:"text",value:e,onChange:e=>t(e.target.value),placeholder:"Luke, I am your father..."})]}),(0,s.jsx)(g().Suspense,{fallback:(0,s.jsx)("h1",{children:"Loading...."}),children:(0,s.jsx)("div",{children:"test"})})]})},se=async(e,t,n)=>{const r=oe.renderStatic();let o=!1;const a=(0,ae.$f)((0,s.jsx)(ie,{}),{onAllReady(){t.statusCode=o?500:200,t.setHeader("Content-type","text/html"),t.write("<!DOCTYPE html>"),t.write(`<html>\n      <head>\n        ${r.title.toString()}\n        ${r.meta.toString()}\n        ${r.link.toString()}\n      </head>\n      <body>`),t.write('<div id="root">'),a.pipe(t),t.write("</div>"),t.write('<script async data-chunk="main" src="http://localhost:3000/static/main.js"><\/script>'),t.write("</body></html>")},onShellError(){t.statusCode=500,t.send("<h1>An error occurred</h1>")},onError(e){o=!0,console.error(e)}})}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,