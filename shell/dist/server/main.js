import{createRequire as e}from"module";var r,t,o,n,a,i,l,u,s,f,c,p,m,d,h,_,g,v,b={4259:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=4259,e.exports=r},509:(e,r,t)=>{t.d(r,{Z:()=>i});var o=t(7141),n=t.n(o);const a=n()();!function(e,r,o){r.use("/static",e.static("./dist/client"));const n=async(e,r,o)=>{const{default:n}=await t.e(194).then(t.bind(t,6194));return n(e,r,o)};r.get("/*",n),o()}(n(),a,(()=>{a.listen(3e3,(()=>{console.info(`[${(new Date).toISOString()}]`,"Shell App is running: ðŸŒŽ http://localhost:3000")}))}));const i=a},852:r=>{r.exports=e(import.meta.url)("async_hooks")},4300:r=>{r.exports=e(import.meta.url)("buffer")},6113:r=>{r.exports=e(import.meta.url)("crypto")},2361:r=>{r.exports=e(import.meta.url)("events")},7147:r=>{r.exports=e(import.meta.url)("fs")},3685:r=>{r.exports=e(import.meta.url)("http")},1808:r=>{r.exports=e(import.meta.url)("net")},1017:r=>{r.exports=e(import.meta.url)("path")},3477:r=>{r.exports=e(import.meta.url)("querystring")},2781:r=>{r.exports=e(import.meta.url)("stream")},1576:r=>{r.exports=e(import.meta.url)("string_decoder")},6224:r=>{r.exports=e(import.meta.url)("tty")},7310:r=>{r.exports=e(import.meta.url)("url")},3837:r=>{r.exports=e(import.meta.url)("util")},9796:r=>{r.exports=e(import.meta.url)("zlib")}},x={};function y(e){var r=x[e];if(void 0!==r)return r.exports;var t=x[e]={id:e,loaded:!1,exports:{}};return b[e].call(t.exports,t,t.exports,y),t.loaded=!0,t.exports}y.m=b,y.c=x,y.x=()=>{var e=y.O(void 0,[141],(()=>y(509)));return y.O(e)},r=[],y.O=(e,t,o,n)=>{if(!t){var a=1/0;for(s=0;s<r.length;s++){for(var[t,o,n]=r[s],i=!0,l=0;l<t.length;l++)(!1&n||a>=n)&&Object.keys(y.O).every((e=>y.O[e](t[l])))?t.splice(l--,1):(i=!1,n<a&&(a=n));if(i){r.splice(s--,1);var u=o();void 0!==u&&(e=u)}}return e}n=n||0;for(var s=r.length;s>0&&r[s-1][2]>n;s--)r[s]=r[s-1];r[s]=[t,o,n]},y.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return y.d(r,{a:r}),r},y.d=(e,r)=>{for(var t in r)y.o(r,t)&&!y.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},y.f={},y.e=e=>Promise.all(Object.keys(y.f).reduce(((r,t)=>(y.f[t](e,r),r)),[])),y.u=e=>141===e?"141.js":e+"."+{194:"ad2a6e0d7068f03a6e90",378:"d11845f13584f1475339"}[e]+".js",y.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),y.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),y.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{y.S={};var e={},r={};y.I=(t,o)=>{o||(o=[]);var n=r[t];if(n||(n=r[t]={}),!(o.indexOf(n)>=0)){if(o.push(n),e[t])return e[t];y.o(y.S,t)||(y.S[t]={});var a=y.S[t],i=[];return"default"===t&&((e,r,t,o)=>{var n=a[e]=a[e]||{},i=n[r];(!i||!i.loaded&&(1!=!i.eager?o:"zoe">i.from))&&(n[r]={get:()=>y.e(378).then((()=>()=>y(7378))),from:"zoe",eager:!1})})("react","18.2.0"),e[t]=i.length?Promise.all(i).then((()=>e[t]=1)):1}}})(),t=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),o=t[1]?r(t[1]):[];return t[2]&&(o.length++,o.push.apply(o,r(t[2]))),t[3]&&(o.push([]),o.push.apply(o,r(t[3]))),o},o=(e,r)=>{e=t(e),r=t(r);for(var o=0;;){if(o>=e.length)return o<r.length&&"u"!=(typeof r[o])[0];var n=e[o],a=(typeof n)[0];if(o>=r.length)return"u"==a;var i=r[o],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&n!=i)return n<i;o++}},n=e=>{var r=e[0],t="";if(1===e.length)return"*";if(r+.5){t+=0==r?">=":-1==r?"<":1==r?"^":2==r?"~":r>0?"=":"!=";for(var o=1,a=1;a<e.length;a++)o--,t+="u"==(typeof(l=e[a]))[0]?"-":(o>0?".":"")+(o=2,l);return t}var i=[];for(a=1;a<e.length;a++){var l=e[a];i.push(0===l?"not("+u()+")":1===l?"("+u()+" || "+u()+")":2===l?i.pop()+" "+i.pop():n(l))}return u();function u(){return i.pop().replace(/^\((.+)\)$/,"$1")}},a=(e,r)=>{if(0 in e){r=t(r);var o=e[0],n=o<0;n&&(o=-o-1);for(var i=0,l=1,u=!0;;l++,i++){var s,f,c=l<e.length?(typeof e[l])[0]:"";if(i>=r.length||"o"==(f=(typeof(s=r[i]))[0]))return!u||("u"==c?l>o&&!n:""==c!=n);if("u"==f){if(!u||"u"!=c)return!1}else if(u)if(c==f)if(l<=o){if(s!=e[l])return!1}else{if(n?s>e[l]:s<e[l])return!1;s!=e[l]&&(u=!1)}else if("s"!=c&&"n"!=c){if(n||l<=o)return!1;u=!1,l--}else{if(l<=o||f<c!=n)return!1;u=!1}else"s"!=c&&"n"!=c&&(u=!1,l--)}}var p=[],m=p.pop.bind(p);for(i=1;i<e.length;i++){var d=e[i];p.push(1==d?m()|m():2==d?m()&m():d?a(d,r):!m())}return!!m()},i=(e,r)=>{var t=e[r];return Object.keys(t).reduce(((e,r)=>!e||!t[e].loaded&&o(e,r)?r:e),0)},l=(e,r,t,o)=>"Unsatisfied version "+t+" from "+(t&&e[r][t].from)+" of shared singleton module "+r+" (required "+n(o)+")",u=(e,r,t,o)=>{var n=i(e,t);return c(e[t][n])},s=(e,r,t,o)=>{var n=i(e,t);return a(o,n)||f(l(e,t,n,o)),c(e[t][n])},f=e=>{"undefined"!=typeof console&&console.warn&&console.warn(e)},c=e=>(e.loaded=1,e.get()),m=(p=e=>function(r,t,o,n){var a=y.I(r);return a&&a.then?a.then(e.bind(e,r,y.S[r],t,o,n)):e(r,y.S[r],t,o,n)})(((e,r,t,o)=>r&&y.o(r,t)?u(r,0,t):o())),d=p(((e,r,t,o,n)=>r&&y.o(r,t)?s(r,0,t,o):n())),h={},_={576:()=>d("default","react",[0,16,3,0],(()=>y.e(378).then((()=>()=>y(7378))))),2145:()=>d("default","react",[,[1,18,0,0],[1,17,0,0],[1,16,3,0],1,1],(()=>y.e(378).then((()=>()=>y(7378))))),2850:()=>d("default","react",[1,18,2,0],(()=>y.e(378).then((()=>()=>y(7378))))),5647:()=>m("default","react",(()=>y.e(378).then((()=>()=>y(7378)))))},g={194:[576,2145,2850,5647]},y.f.consumes=(e,r)=>{y.o(g,e)&&g[e].forEach((e=>{if(y.o(h,e))return r.push(h[e]);var t=r=>{h[e]=0,y.m[e]=t=>{delete y.c[e],t.exports=r()}},o=r=>{delete h[e],y.m[e]=t=>{throw delete y.c[e],r}};try{var n=_[e]();n.then?r.push(h[e]=n.then(t).catch(o)):t(n)}catch(e){o(e)}}))},(()=>{var e={179:0};y.O.readFileVm=r=>0===e[r];var r=r=>{var t=r.modules,o=r.ids,n=r.runtime;for(var a in t)y.o(t,a)&&(y.m[a]=t[a]);n&&n(y);for(var i=0;i<o.length;i++)e[o[i]]&&e[o[i]][0](),e[o[i]]=0;y.O()};y.l=(e,r,t)=>{global.__remote_scope__||(global.__remote_scope__={_config:{}}),function(e,r,t){if(!t)throw new Error("__webpack_require__.l name is required for "+e);if(void 0!==global.__remote_scope__[t])return r(global.__remote_scope__[t]);const o=require("vm");(global.webpackChunkLoad||global.fetch||require("node-fetch"))(e).then((function(e){return e.text()})).then((function(n){try{const a="undefined"==typeof URLSearchParams?{exports,require,module,global,__filename,__dirname,URL,console,process,Buffer,...global,remoteEntryName:t}:{exports,require,module,global,__filename,__dirname,URL,URLSearchParams,console,process,Buffer,...global,remoteEntryName:t},i=o.runInNewContext(n+"\nmodule.exports",a,{filename:"node-federation-loader-"+t+".vm"}),l=i[t]||i;global.__remote_scope__[t]||(global.__remote_scope__[t]={get:l.get,init:function(e,r){try{l.init(e,r)}catch(e){}}},global.__remote_scope__._config[t]=e),r(global.__remote_scope__[t])}catch(t){console.error("executeLoad hit catch block"),t.target={src:e},r(t)}})).catch((t=>{t.target={src:e},r(t)}))}(e,r,t)},y.f.readFileVm=function(t,o){var n=e[t];if(0!==n)if(n)o.push(n[2]);else{var a=new Promise((async function(o,a){n=e[t]=[o,a];var i,l,u=require("path").join(__dirname,""+y.u(t)),s=require("fs");if(s.existsSync(u))s.readFile(u,"utf-8",(function(e,t){if(e)return a(e);var o={};require("vm").runInThisContext("(function(exports, require, __dirname, __filename) {"+t+"\n})",u)(o,require,require("path").dirname(u),u),r(o)}));else{Object.assign(global.__remote_scope__._config,{});var f=global.__remote_scope__._config.shell;"function"==typeof f&&(f=await f());var c=new URL(f),p=y.u(t),m=require("path").basename(c.pathname);c.pathname=c.pathname.replace(m,p),i=c.toString(),l=function(e,t){if(e)return console.error("error loading remote chunk",c.toString(),"got",t,"with error",e),a(e);var o={};try{require("vm").runInThisContext("(function(exports, require, __dirname, __filename) {"+t+"\n})",u)(o,require,require("path").dirname(u),u)}catch(e){console.error("runInThisContext threw",e)}r(o)},global.webpackChunkLoad?global.webpackChunkLoad(i).then((function(e){return e.text()})).then((function(e){l(null,e)})).catch((function(e){return console.error("Federated Chunk load failed",error),l(error)})):(i.startsWith("https")?require("https"):require("http")).get(i,(function(e){if(200===e.statusCode){let r="";e.setEncoding("utf8"),e.on("data",(e=>{r+=e})),e.on("end",(()=>{l(null,r)}))}else l(e)})).on("error",(e=>(console.error("Federated Chunk load failed",e),l(e))))}}));o.push(n[2]=a)}}})(),v=y.x,y.x=()=>y.e(141).then(v);var w=y.x().Z;export{w as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,