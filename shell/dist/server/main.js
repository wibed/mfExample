import{createRequire as e}from"module";var r,t,o,n,a,i,l,u,s,c,f,p={4259:e=>{function r(e){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=4259,e.exports=r},509:(e,r,t)=>{t.d(r,{Z:()=>i});var o=t(7141),n=t.n(o);const a=n()();!function(e,r,o){r.use("/static",e.static("./dist/client"));const n=async(e,r,o)=>(await t.e(194).then(t.bind(t,6194))).default(e,r,o);r.get("/*",n),o()}(n(),a,(()=>{a.listen(3e3,(()=>{console.info(`[${(new Date).toISOString()}]`,"Shell App is running: ðŸŒŽ http://localhost:3000")}))}));const i=a},852:r=>{r.exports=e(import.meta.url)("async_hooks")},4300:r=>{r.exports=e(import.meta.url)("buffer")},6113:r=>{r.exports=e(import.meta.url)("crypto")},2361:r=>{r.exports=e(import.meta.url)("events")},7147:r=>{r.exports=e(import.meta.url)("fs")},3685:r=>{r.exports=e(import.meta.url)("http")},1808:r=>{r.exports=e(import.meta.url)("net")},1017:r=>{r.exports=e(import.meta.url)("path")},3477:r=>{r.exports=e(import.meta.url)("querystring")},2781:r=>{r.exports=e(import.meta.url)("stream")},1576:r=>{r.exports=e(import.meta.url)("string_decoder")},6224:r=>{r.exports=e(import.meta.url)("tty")},7310:r=>{r.exports=e(import.meta.url)("url")},3837:r=>{r.exports=e(import.meta.url)("util")},9796:r=>{r.exports=e(import.meta.url)("zlib")}},m={};function d(e){var r=m[e];if(void 0!==r)return r.exports;var t=m[e]={id:e,loaded:!1,exports:{}};return p[e].call(t.exports,t,t.exports,d),t.loaded=!0,t.exports}d.m=p,d.c=m,d.x=()=>{var e=d.O(void 0,[141],(()=>d(509)));return d.O(e)},r=[],d.O=(e,t,o,n)=>{if(!t){var a=1/0;for(s=0;s<r.length;s++){for(var[t,o,n]=r[s],i=!0,l=0;l<t.length;l++)(!1&n||a>=n)&&Object.keys(d.O).every((e=>d.O[e](t[l])))?t.splice(l--,1):(i=!1,n<a&&(a=n));if(i){r.splice(s--,1);var u=o();void 0!==u&&(e=u)}}return e}n=n||0;for(var s=r.length;s>0&&r[s-1][2]>n;s--)r[s]=r[s-1];r[s]=[t,o,n]},d.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return d.d(r,{a:r}),r},d.d=(e,r)=>{for(var t in r)d.o(r,t)&&!d.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},d.f={},d.e=e=>Promise.all(Object.keys(d.f).reduce(((r,t)=>(d.f[t](e,r),r)),[])),d.u=e=>141===e?"141.js":e+"."+{194:"00ab8354906304d590cc",378:"d11845f13584f1475339"}[e]+".js",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),d.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},d.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{d.S={};var e={},r={};d.I=(t,o)=>{o||(o=[]);var n=r[t];if(n||(n=r[t]={}),!(o.indexOf(n)>=0)){if(o.push(n),e[t])return e[t];d.o(d.S,t)||(d.S[t]={});var a=d.S[t],i=[];return"default"===t&&((e,r,t,o)=>{var n=a[e]=a[e]||{},i=n[r];(!i||!i.loaded&&(1!=!i.eager?o:"zoe">i.from))&&(n[r]={get:()=>d.e(378).then((()=>()=>d(7378))),from:"zoe",eager:!1})})("react","18.2.0"),e[t]=i.length?Promise.all(i).then((()=>e[t]=1)):1}}})(),t=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),o=t[1]?r(t[1]):[];return t[2]&&(o.length++,o.push.apply(o,r(t[2]))),t[3]&&(o.push([]),o.push.apply(o,r(t[3]))),o},o=(e,r)=>{e=t(e),r=t(r);for(var o=0;;){if(o>=e.length)return o<r.length&&"u"!=(typeof r[o])[0];var n=e[o],a=(typeof n)[0];if(o>=r.length)return"u"==a;var i=r[o],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&n!=i)return n<i;o++}},n=(e,r)=>{if(0 in e){r=t(r);var o=e[0],a=o<0;a&&(o=-o-1);for(var i=0,l=1,u=!0;;l++,i++){var s,c,f=l<e.length?(typeof e[l])[0]:"";if(i>=r.length||"o"==(c=(typeof(s=r[i]))[0]))return!u||("u"==f?l>o&&!a:""==f!=a);if("u"==c){if(!u||"u"!=f)return!1}else if(u)if(f==c)if(l<=o){if(s!=e[l])return!1}else{if(a?s>e[l]:s<e[l])return!1;s!=e[l]&&(u=!1)}else if("s"!=f&&"n"!=f){if(a||l<=o)return!1;u=!1,l--}else{if(l<=o||c<f!=a)return!1;u=!1}else"s"!=f&&"n"!=f&&(u=!1,l--)}}var p=[],m=p.pop.bind(p);for(i=1;i<e.length;i++){var d=e[i];p.push(1==d?m()|m():2==d?m()&m():d?n(d,r):!m())}return!!m()},a=(e,r,t)=>{var a=e[r];return(r=Object.keys(a).reduce(((e,r)=>!n(t,r)||e&&!o(e,r)?e:r),0))&&a[r]},i=e=>(e.loaded=1,e.get()),l=(e=>function(r,t,o,n){var a=d.I(r);return a&&a.then?a.then(e.bind(e,r,d.S[r],t,o,n)):e(0,d.S[r],t,o,n)})(((e,r,t,o,n)=>{var l=r&&d.o(r,t)&&a(r,t,o);return l?i(l):n()})),u={},s={104:()=>l("default","react",[1,18,2,0],(()=>d.e(378).then((()=>()=>d(7378)))))},c={194:[104]},d.f.consumes=(e,r)=>{d.o(c,e)&&c[e].forEach((e=>{if(d.o(u,e))return r.push(u[e]);var t=r=>{u[e]=0,d.m[e]=t=>{delete d.c[e],t.exports=r()}},o=r=>{delete u[e],d.m[e]=t=>{throw delete d.c[e],r}};try{var n=s[e]();n.then?r.push(u[e]=n.then(t).catch(o)):t(n)}catch(e){o(e)}}))},(()=>{var e={179:0};d.O.readFileVm=r=>0===e[r];var r=r=>{var t=r.modules,o=r.ids,n=r.runtime;for(var a in t)d.o(t,a)&&(d.m[a]=t[a]);n&&n(d);for(var i=0;i<o.length;i++)e[o[i]]&&e[o[i]][0](),e[o[i]]=0;d.O()};d.l=(e,r,t)=>{global.__remote_scope__||(global.__remote_scope__={_config:{}}),function(e,r,t){if(!t)throw new Error("__webpack_require__.l name is required for "+e);if(void 0!==global.__remote_scope__[t])return r(global.__remote_scope__[t]);const o=require("vm");(global.webpackChunkLoad||global.fetch||require("node-fetch"))(e).then((function(e){return e.text()})).then((function(n){try{const a="undefined"==typeof URLSearchParams?{exports,require,module,global,__filename,__dirname,URL,console,process,Buffer,...global,remoteEntryName:t}:{exports,require,module,global,__filename,__dirname,URL,URLSearchParams,console,process,Buffer,...global,remoteEntryName:t},i=o.runInNewContext(n+"\nmodule.exports",a,{filename:"node-federation-loader-"+t+".vm"}),l=i[t]||i;global.__remote_scope__[t]||(global.__remote_scope__[t]={get:l.get,init:function(e,r){try{l.init(e,r)}catch(e){}}},global.__remote_scope__._config[t]=e),r(global.__remote_scope__[t])}catch(t){console.error("executeLoad hit catch block"),t.target={src:e},r(t)}})).catch((t=>{t.target={src:e},r(t)}))}(e,r,t)},d.f.readFileVm=function(t,o){var n=e[t];if(0!==n)if(n)o.push(n[2]);else{var a=new Promise((async function(o,a){n=e[t]=[o,a];var i,l,u=require("path").join(__dirname,""+d.u(t)),s=require("fs");if(s.existsSync(u))s.readFile(u,"utf-8",(function(e,t){if(e)return a(e);var o={};require("vm").runInThisContext("(function(exports, require, __dirname, __filename) {"+t+"\n})",u)(o,require,require("path").dirname(u),u),r(o)}));else{Object.assign(global.__remote_scope__._config,{});var c=global.__remote_scope__._config.shell;"function"==typeof c&&(c=await c());var f=new URL(c),p=d.u(t),m=require("path").basename(f.pathname);f.pathname=f.pathname.replace(m,p),i=f.toString(),l=function(e,t){if(e)return console.error("error loading remote chunk",f.toString(),"got",t,"with error",e),a(e);var o={};try{require("vm").runInThisContext("(function(exports, require, __dirname, __filename) {"+t+"\n})",u)(o,require,require("path").dirname(u),u)}catch(e){console.error("runInThisContext threw",e)}r(o)},global.webpackChunkLoad?global.webpackChunkLoad(i).then((function(e){return e.text()})).then((function(e){l(null,e)})).catch((function(e){return console.error("Federated Chunk load failed",error),l(error)})):(i.startsWith("https")?require("https"):require("http")).get(i,(function(e){if(200===e.statusCode){let r="";e.setEncoding("utf8"),e.on("data",(e=>{r+=e})),e.on("end",(()=>{l(null,r)}))}else l(e)})).on("error",(e=>(console.error("Federated Chunk load failed",e),l(e))))}}));o.push(n[2]=a)}}})(),f=d.x,d.x=()=>d.e(141).then(f);var _=d.x().Z;export{_ as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,